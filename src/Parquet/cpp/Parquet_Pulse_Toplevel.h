/* 
  This file was generated by KaRaMeL <https://github.com/FStarLang/karamel>
  KaRaMeL invocation: krml -skip-linking out.krml
  F* version: <unknown>
  KaRaMeL version: 06a6d2fb
 */

#ifndef Parquet_Pulse_Toplevel_H
#define Parquet_Pulse_Toplevel_H

#include "krmllib.h"

typedef uint8_t Parquet_Pulse_Toplevel_byte;

typedef struct Parquet_Pulse_Toplevel_bytes_s
{
  uint8_t *data;
  size_t len;
}
Parquet_Pulse_Toplevel_bytes;

#define Parquet_Pulse_Toplevel_BOOLEAN 0
#define Parquet_Pulse_Toplevel_INT32 1
#define Parquet_Pulse_Toplevel_INT64 2
#define Parquet_Pulse_Toplevel_INT96 3
#define Parquet_Pulse_Toplevel_FLOAT 4
#define Parquet_Pulse_Toplevel_DOUBLE 5
#define Parquet_Pulse_Toplevel_BYTE_ARRAY 6
#define Parquet_Pulse_Toplevel_FIXED_LEN_BYTE_ARRAY 7

typedef uint8_t Parquet_Pulse_Toplevel_physical_type;

#define Parquet_Pulse_Toplevel_DEPRECATED_UTF8 0
#define Parquet_Pulse_Toplevel_DEPRECATED_MAP 1
#define Parquet_Pulse_Toplevel_DEPRECATED_MAP_KEY_VALUE 2
#define Parquet_Pulse_Toplevel_DEPRECATED_LIST 3
#define Parquet_Pulse_Toplevel_DEPRECATED_ENUM 4
#define Parquet_Pulse_Toplevel_DEPRECATED_DECIMAL 5
#define Parquet_Pulse_Toplevel_DEPRECATED_DATE 6
#define Parquet_Pulse_Toplevel_DEPRECATED_TIME_MILLIS 7
#define Parquet_Pulse_Toplevel_DEPRECATED_TIME_MICROS 8
#define Parquet_Pulse_Toplevel_DEPRECATED_TIMESTAMP_MILLIS 9
#define Parquet_Pulse_Toplevel_DEPRECATED_TIMESTAMP_MICROS 10
#define Parquet_Pulse_Toplevel_DEPRECATED_UINT_8 11
#define Parquet_Pulse_Toplevel_DEPRECATED_UINT_16 12
#define Parquet_Pulse_Toplevel_DEPRECATED_UINT_32 13
#define Parquet_Pulse_Toplevel_DEPRECATED_UINT_64 14
#define Parquet_Pulse_Toplevel_DEPRECATED_INT_8 15
#define Parquet_Pulse_Toplevel_DEPRECATED_INT_16 16
#define Parquet_Pulse_Toplevel_DEPRECATED_INT_32 17
#define Parquet_Pulse_Toplevel_DEPRECATED_INT_64 18
#define Parquet_Pulse_Toplevel_DEPRECATED_JSON 19
#define Parquet_Pulse_Toplevel_DEPRECATED_BSON 20
#define Parquet_Pulse_Toplevel_DEPRECATED_INTERVAL 21

typedef uint8_t Parquet_Pulse_Toplevel_converted_type;

#define Parquet_Pulse_Toplevel_REQUIRED 0
#define Parquet_Pulse_Toplevel_OPTIONAL 1
#define Parquet_Pulse_Toplevel_REPEATED 2

typedef uint8_t Parquet_Pulse_Toplevel_field_repetition_type;

#define Parquet_Pulse_Toplevel_PLAIN 0
#define Parquet_Pulse_Toplevel_GROUP_VAR_INT 1
#define Parquet_Pulse_Toplevel_PLAIN_DICTIONARY 2
#define Parquet_Pulse_Toplevel_RLE 3
#define Parquet_Pulse_Toplevel_BIT_PACKED 4
#define Parquet_Pulse_Toplevel_DELTA_BINARY_PACKED 5
#define Parquet_Pulse_Toplevel_DELTA_LENGTH_BYTE_ARRAY 6
#define Parquet_Pulse_Toplevel_DELTA_BYTE_ARRAY 7
#define Parquet_Pulse_Toplevel_RLE_DICTIONARY 8
#define Parquet_Pulse_Toplevel_BYTE_STREAM_SPLIT 9

typedef uint8_t Parquet_Pulse_Toplevel_encoding;

#define Parquet_Pulse_Toplevel_UNCOMPRESSED 0
#define Parquet_Pulse_Toplevel_SNAPPY 1
#define Parquet_Pulse_Toplevel_GZIP 2
#define Parquet_Pulse_Toplevel_LZO 3
#define Parquet_Pulse_Toplevel_BROTLI 4
#define Parquet_Pulse_Toplevel_LZ4 5
#define Parquet_Pulse_Toplevel_ZSTD 6
#define Parquet_Pulse_Toplevel_LZ4_RAW 7

typedef uint8_t Parquet_Pulse_Toplevel_compression_codec;

#define Parquet_Pulse_Toplevel_DATA_PAGE 0
#define Parquet_Pulse_Toplevel_INDEX_PAGE 1
#define Parquet_Pulse_Toplevel_DICTIONARY_PAGE 2
#define Parquet_Pulse_Toplevel_DATA_PAGE_V2 3

typedef uint8_t Parquet_Pulse_Toplevel_page_type;

#define Parquet_Pulse_Toplevel_UNORDERED 0
#define Parquet_Pulse_Toplevel_ASCENDING 1
#define Parquet_Pulse_Toplevel_DESCENDING 2

typedef uint8_t Parquet_Pulse_Toplevel_boundary_order;

#define Parquet_Pulse_Toplevel_SPHERICAL 0
#define Parquet_Pulse_Toplevel_VINCENTY 1
#define Parquet_Pulse_Toplevel_THOMAS 2
#define Parquet_Pulse_Toplevel_ANDOYER 3
#define Parquet_Pulse_Toplevel_KARNEY 4

typedef uint8_t Parquet_Pulse_Toplevel_edge_interpolation_algorithm;

typedef int64_t Parquet_Pulse_Toplevel_int64;

typedef int32_t Parquet_Pulse_Toplevel_int32;

typedef int16_t Parquet_Pulse_Toplevel_int16;

typedef int8_t Parquet_Pulse_Toplevel_int8;

#define FStar_Pervasives_Native_None 0
#define FStar_Pervasives_Native_Some 1

typedef uint8_t FStar_Pervasives_Native_option__int64_t_tags;

typedef struct FStar_Pervasives_Native_option__int64_t_s
{
  FStar_Pervasives_Native_option__int64_t_tags tag;
  int64_t v;
}
FStar_Pervasives_Native_option__int64_t;

typedef struct Parquet_Pulse_Toplevel_vec__int64_t_s
{
  int64_t *data;
  size_t len;
}
Parquet_Pulse_Toplevel_vec__int64_t;

typedef struct FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_vec_int64_t_s
{
  FStar_Pervasives_Native_option__int64_t_tags tag;
  Parquet_Pulse_Toplevel_vec__int64_t v;
}
FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_vec_int64_t;

typedef struct Parquet_Pulse_Toplevel_size_statistics_s
{
  FStar_Pervasives_Native_option__int64_t unencoded_byte_array_data_bytes;
  FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_vec_int64_t repetition_level_histogram;
  FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_vec_int64_t definition_level_histogram;
}
Parquet_Pulse_Toplevel_size_statistics;

typedef struct Parquet_Pulse_Toplevel_bounding_box_s
{
  FStar_Pervasives_Native_option__int64_t_tags zmin;
  FStar_Pervasives_Native_option__int64_t_tags zmax;
  FStar_Pervasives_Native_option__int64_t_tags mmin;
  FStar_Pervasives_Native_option__int64_t_tags mmax;
}
Parquet_Pulse_Toplevel_bounding_box;

typedef struct FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_bounding_box_s
{
  FStar_Pervasives_Native_option__int64_t_tags tag;
  Parquet_Pulse_Toplevel_bounding_box v;
}
FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_bounding_box;

typedef struct Parquet_Pulse_Toplevel_vec__int32_t_s
{
  int32_t *data;
  size_t len;
}
Parquet_Pulse_Toplevel_vec__int32_t;

typedef struct FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_vec_int32_t_s
{
  FStar_Pervasives_Native_option__int64_t_tags tag;
  Parquet_Pulse_Toplevel_vec__int32_t v;
}
FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_vec_int32_t;

typedef struct Parquet_Pulse_Toplevel_geospatial_statistics_s
{
  FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_bounding_box bbox;
  FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_vec_int32_t geospatial_types;
}
Parquet_Pulse_Toplevel_geospatial_statistics;

typedef struct FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_vec_uint8_t_s
{
  FStar_Pervasives_Native_option__int64_t_tags tag;
  Parquet_Pulse_Toplevel_bytes v;
}
FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_vec_uint8_t;

typedef struct FStar_Pervasives_Native_option__bool_s
{
  FStar_Pervasives_Native_option__int64_t_tags tag;
  bool v;
}
FStar_Pervasives_Native_option__bool;

typedef struct Parquet_Pulse_Toplevel_statistics_s
{
  FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_vec_uint8_t max;
  FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_vec_uint8_t min;
  FStar_Pervasives_Native_option__int64_t null_count;
  FStar_Pervasives_Native_option__int64_t distinct_count;
  FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_vec_uint8_t max_value;
  FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_vec_uint8_t min_value;
  FStar_Pervasives_Native_option__bool is_max_value_exact;
  FStar_Pervasives_Native_option__bool is_min_value_exact;
}
Parquet_Pulse_Toplevel_statistics;

typedef void *Parquet_Pulse_Toplevel_string_type;

typedef void *Parquet_Pulse_Toplevel_uuid_type;

typedef void *Parquet_Pulse_Toplevel_map_type;

typedef void *Parquet_Pulse_Toplevel_list_type;

typedef void *Parquet_Pulse_Toplevel_enum_type;

typedef void *Parquet_Pulse_Toplevel_date_type;

typedef void *Parquet_Pulse_Toplevel_float16_type;

typedef void *Parquet_Pulse_Toplevel_null_type;

typedef void *Parquet_Pulse_Toplevel_json_type;

typedef void *Parquet_Pulse_Toplevel_bson_type;

typedef struct Parquet_Pulse_Toplevel_decimal_type_s
{
  int32_t scale;
  int32_t precision;
}
Parquet_Pulse_Toplevel_decimal_type;

typedef void *Parquet_Pulse_Toplevel_milli_seconds;

typedef void *Parquet_Pulse_Toplevel_micro_seconds;

typedef void *Parquet_Pulse_Toplevel_nano_seconds;

#define Parquet_Pulse_Toplevel_MILLIS 0
#define Parquet_Pulse_Toplevel_MICROS 1
#define Parquet_Pulse_Toplevel_NANOS 2

typedef uint8_t Parquet_Pulse_Toplevel_time_unit;

bool Parquet_Pulse_Toplevel_uu___is_MILLIS(Parquet_Pulse_Toplevel_time_unit projectee);

bool Parquet_Pulse_Toplevel_uu___is_MICROS(Parquet_Pulse_Toplevel_time_unit projectee);

bool Parquet_Pulse_Toplevel_uu___is_NANOS(Parquet_Pulse_Toplevel_time_unit projectee);

typedef struct Parquet_Pulse_Toplevel_timestamp_type_s
{
  bool isAdjustedToUTC;
  Parquet_Pulse_Toplevel_time_unit unit;
}
Parquet_Pulse_Toplevel_timestamp_type;

typedef struct Parquet_Pulse_Toplevel_time_type_s
{
  bool isAdjustedToUTC1;
  Parquet_Pulse_Toplevel_time_unit unit1;
}
Parquet_Pulse_Toplevel_time_type;

typedef struct Parquet_Pulse_Toplevel_int_type_s
{
  int8_t bitWidth;
  bool isSigned;
}
Parquet_Pulse_Toplevel_int_type;

typedef struct FStar_Pervasives_Native_option__int8_t_s
{
  FStar_Pervasives_Native_option__int64_t_tags tag;
  int8_t v;
}
FStar_Pervasives_Native_option__int8_t;

typedef FStar_Pervasives_Native_option__int8_t Parquet_Pulse_Toplevel_variant_type;

typedef struct FStar_Pervasives_Native_option__Prims_string_s
{
  FStar_Pervasives_Native_option__int64_t_tags tag;
  Prims_string v;
}
FStar_Pervasives_Native_option__Prims_string;

typedef FStar_Pervasives_Native_option__Prims_string Parquet_Pulse_Toplevel_geometry_type;

typedef struct
FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_edge_interpolation_algorithm_s
{
  FStar_Pervasives_Native_option__int64_t_tags tag;
  Parquet_Pulse_Toplevel_edge_interpolation_algorithm v;
}
FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_edge_interpolation_algorithm;

typedef struct Parquet_Pulse_Toplevel_geography_type_s
{
  FStar_Pervasives_Native_option__Prims_string crs1;
  FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_edge_interpolation_algorithm algorithm;
}
Parquet_Pulse_Toplevel_geography_type;

#define Parquet_Pulse_Toplevel_STRING 0
#define Parquet_Pulse_Toplevel_MAP 1
#define Parquet_Pulse_Toplevel_LIST 2
#define Parquet_Pulse_Toplevel_ENUM 3
#define Parquet_Pulse_Toplevel_DECIMAL 4
#define Parquet_Pulse_Toplevel_DATE 5
#define Parquet_Pulse_Toplevel_TIME 6
#define Parquet_Pulse_Toplevel_TIMESTAMP 7
#define Parquet_Pulse_Toplevel_INTEGER 8
#define Parquet_Pulse_Toplevel_UNKNOWN 9
#define Parquet_Pulse_Toplevel_JSON 10
#define Parquet_Pulse_Toplevel_BSON 11
#define Parquet_Pulse_Toplevel_UUID 12
#define Parquet_Pulse_Toplevel_FLOAT16 13
#define Parquet_Pulse_Toplevel_VARIANT 14
#define Parquet_Pulse_Toplevel_GEOMETRY 15
#define Parquet_Pulse_Toplevel_GEOGRAPHY 16

typedef uint8_t Parquet_Pulse_Toplevel_logical_type_tags;

typedef struct Parquet_Pulse_Toplevel_logical_type_s
{
  Parquet_Pulse_Toplevel_logical_type_tags tag;
  union {
    Parquet_Pulse_Toplevel_decimal_type case_DECIMAL;
    Parquet_Pulse_Toplevel_time_type case_TIME;
    Parquet_Pulse_Toplevel_timestamp_type case_TIMESTAMP;
    Parquet_Pulse_Toplevel_int_type case_INTEGER;
    FStar_Pervasives_Native_option__int8_t case_VARIANT;
    FStar_Pervasives_Native_option__Prims_string case_GEOMETRY;
    Parquet_Pulse_Toplevel_geography_type case_GEOGRAPHY;
  }
  ;
}
Parquet_Pulse_Toplevel_logical_type;

bool Parquet_Pulse_Toplevel_uu___is_STRING(Parquet_Pulse_Toplevel_logical_type projectee);

bool Parquet_Pulse_Toplevel_uu___is_MAP(Parquet_Pulse_Toplevel_logical_type projectee);

bool Parquet_Pulse_Toplevel_uu___is_LIST(Parquet_Pulse_Toplevel_logical_type projectee);

bool Parquet_Pulse_Toplevel_uu___is_ENUM(Parquet_Pulse_Toplevel_logical_type projectee);

bool Parquet_Pulse_Toplevel_uu___is_DECIMAL(Parquet_Pulse_Toplevel_logical_type projectee);

bool Parquet_Pulse_Toplevel_uu___is_DATE(Parquet_Pulse_Toplevel_logical_type projectee);

bool Parquet_Pulse_Toplevel_uu___is_TIME(Parquet_Pulse_Toplevel_logical_type projectee);

bool Parquet_Pulse_Toplevel_uu___is_TIMESTAMP(Parquet_Pulse_Toplevel_logical_type projectee);

bool Parquet_Pulse_Toplevel_uu___is_INTEGER(Parquet_Pulse_Toplevel_logical_type projectee);

bool Parquet_Pulse_Toplevel_uu___is_UNKNOWN(Parquet_Pulse_Toplevel_logical_type projectee);

bool Parquet_Pulse_Toplevel_uu___is_JSON(Parquet_Pulse_Toplevel_logical_type projectee);

bool Parquet_Pulse_Toplevel_uu___is_BSON(Parquet_Pulse_Toplevel_logical_type projectee);

bool Parquet_Pulse_Toplevel_uu___is_UUID(Parquet_Pulse_Toplevel_logical_type projectee);

bool Parquet_Pulse_Toplevel_uu___is_FLOAT16(Parquet_Pulse_Toplevel_logical_type projectee);

bool Parquet_Pulse_Toplevel_uu___is_VARIANT(Parquet_Pulse_Toplevel_logical_type projectee);

bool Parquet_Pulse_Toplevel_uu___is_GEOMETRY(Parquet_Pulse_Toplevel_logical_type projectee);

bool Parquet_Pulse_Toplevel_uu___is_GEOGRAPHY(Parquet_Pulse_Toplevel_logical_type projectee);

typedef struct FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_physical_type_s
{
  FStar_Pervasives_Native_option__int64_t_tags tag;
  Parquet_Pulse_Toplevel_physical_type v;
}
FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_physical_type;

typedef struct FStar_Pervasives_Native_option__int32_t_s
{
  FStar_Pervasives_Native_option__int64_t_tags tag;
  int32_t v;
}
FStar_Pervasives_Native_option__int32_t;

typedef struct FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_field_repetition_type_s
{
  FStar_Pervasives_Native_option__int64_t_tags tag;
  Parquet_Pulse_Toplevel_field_repetition_type v;
}
FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_field_repetition_type;

typedef struct FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_converted_type_s
{
  FStar_Pervasives_Native_option__int64_t_tags tag;
  Parquet_Pulse_Toplevel_converted_type v;
}
FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_converted_type;

typedef struct FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_logical_type_s
{
  FStar_Pervasives_Native_option__int64_t_tags tag;
  Parquet_Pulse_Toplevel_logical_type v;
}
FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_logical_type;

typedef struct Parquet_Pulse_Toplevel_schema_element_s
{
  FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_physical_type type_;
  FStar_Pervasives_Native_option__int32_t type_length;
  FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_field_repetition_type repetition_type;
  Prims_string name;
  FStar_Pervasives_Native_option__int32_t num_children;
  FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_converted_type converted_type;
  FStar_Pervasives_Native_option__int32_t scale1;
  FStar_Pervasives_Native_option__int32_t precision1;
  FStar_Pervasives_Native_option__int32_t field_id;
  FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_logical_type logical_type;
}
Parquet_Pulse_Toplevel_schema_element;

typedef struct FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_statistics_s
{
  FStar_Pervasives_Native_option__int64_t_tags tag;
  Parquet_Pulse_Toplevel_statistics v;
}
FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_statistics;

typedef struct Parquet_Pulse_Toplevel_data_page_header_s
{
  int32_t num_values;
  Parquet_Pulse_Toplevel_encoding encoding_;
  Parquet_Pulse_Toplevel_encoding definition_level_encoding;
  Parquet_Pulse_Toplevel_encoding repetition_level_encoding;
  FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_statistics statistics;
}
Parquet_Pulse_Toplevel_data_page_header;

typedef void *Parquet_Pulse_Toplevel_index_page_header;

typedef struct Parquet_Pulse_Toplevel_dictionary_page_header_s
{
  int32_t num_values1;
  Parquet_Pulse_Toplevel_encoding encoding;
  FStar_Pervasives_Native_option__bool is_sorted;
}
Parquet_Pulse_Toplevel_dictionary_page_header;

typedef struct Parquet_Pulse_Toplevel_data_page_header_v2_s
{
  int32_t num_values2;
  int32_t num_nulls;
  int32_t num_rows;
  Parquet_Pulse_Toplevel_encoding encoding1;
  int32_t definition_levels_byte_length;
  int32_t repetition_levels_byte_length;
  FStar_Pervasives_Native_option__bool is_compressed;
  FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_statistics statistics1;
}
Parquet_Pulse_Toplevel_data_page_header_v2;

typedef void *Parquet_Pulse_Toplevel_split_block_algorithm;

#define Parquet_Pulse_Toplevel_BLOCK 0

typedef uint8_t Parquet_Pulse_Toplevel_bloom_filter_algorithm;

bool
Parquet_Pulse_Toplevel_uu___is_BLOCK(Parquet_Pulse_Toplevel_bloom_filter_algorithm projectee);

typedef void *Parquet_Pulse_Toplevel_xx_hash;

#define Parquet_Pulse_Toplevel_XXHASH 0

typedef uint8_t Parquet_Pulse_Toplevel_bloom_filter_hash;

bool Parquet_Pulse_Toplevel_uu___is_XXHASH(Parquet_Pulse_Toplevel_bloom_filter_hash projectee);

typedef void *Parquet_Pulse_Toplevel_uncompressed;

#define Parquet_Pulse_Toplevel_UN_COMPRESSED 0

typedef uint8_t Parquet_Pulse_Toplevel_bloom_filter_compression;

bool
Parquet_Pulse_Toplevel_uu___is_UN_COMPRESSED(
  Parquet_Pulse_Toplevel_bloom_filter_compression projectee
);

typedef struct Parquet_Pulse_Toplevel_bloom_filter_header_s
{
  int32_t numBytes;
  Parquet_Pulse_Toplevel_bloom_filter_algorithm algorithm1;
  Parquet_Pulse_Toplevel_bloom_filter_hash hash;
  Parquet_Pulse_Toplevel_bloom_filter_compression compression;
}
Parquet_Pulse_Toplevel_bloom_filter_header;

typedef struct FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_data_page_header_s
{
  FStar_Pervasives_Native_option__int64_t_tags tag;
  Parquet_Pulse_Toplevel_data_page_header v;
}
FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_data_page_header;

typedef struct FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_dictionary_page_header_s
{
  FStar_Pervasives_Native_option__int64_t_tags tag;
  Parquet_Pulse_Toplevel_dictionary_page_header v;
}
FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_dictionary_page_header;

typedef struct FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_data_page_header_v2_s
{
  FStar_Pervasives_Native_option__int64_t_tags tag;
  Parquet_Pulse_Toplevel_data_page_header_v2 v;
}
FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_data_page_header_v2;

typedef struct Parquet_Pulse_Toplevel_page_header_s
{
  Parquet_Pulse_Toplevel_page_type ptype;
  int32_t uncompressed_page_size;
  int32_t compressed_page_size;
  FStar_Pervasives_Native_option__int32_t crc;
  FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_data_page_header data_page_header;
  FStar_Pervasives_Native_option__int64_t_tags index_page_header;
  FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_dictionary_page_header
  dictionary_page_header;
  FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_data_page_header_v2 data_page_header_v2;
}
Parquet_Pulse_Toplevel_page_header;

typedef struct Parquet_Pulse_Toplevel_key_value_s
{
  Prims_string key;
  FStar_Pervasives_Native_option__Prims_string value;
}
Parquet_Pulse_Toplevel_key_value;

typedef struct Parquet_Pulse_Toplevel_sorting_column_s
{
  int32_t column_idx;
  bool descending;
  bool nulls_first;
}
Parquet_Pulse_Toplevel_sorting_column;

typedef struct Parquet_Pulse_Toplevel_page_encoding_stats_s
{
  Parquet_Pulse_Toplevel_page_type page_type;
  Parquet_Pulse_Toplevel_encoding encoding2;
  int32_t count;
}
Parquet_Pulse_Toplevel_page_encoding_stats;

typedef struct Parquet_Pulse_Toplevel_vec__Parquet_Pulse_Toplevel_encoding_s
{
  Parquet_Pulse_Toplevel_encoding *data;
  size_t len;
}
Parquet_Pulse_Toplevel_vec__Parquet_Pulse_Toplevel_encoding;

typedef struct Parquet_Pulse_Toplevel_vec__Prims_string_s
{
  Prims_string *data;
  size_t len;
}
Parquet_Pulse_Toplevel_vec__Prims_string;

typedef struct Parquet_Pulse_Toplevel_vec__Parquet_Pulse_Toplevel_key_value_s
{
  Parquet_Pulse_Toplevel_key_value *data;
  size_t len;
}
Parquet_Pulse_Toplevel_vec__Parquet_Pulse_Toplevel_key_value;

typedef struct
FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_vec_Parquet_Pulse_Toplevel_key_value_s
{
  FStar_Pervasives_Native_option__int64_t_tags tag;
  Parquet_Pulse_Toplevel_vec__Parquet_Pulse_Toplevel_key_value v;
}
FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_vec_Parquet_Pulse_Toplevel_key_value;

typedef struct Parquet_Pulse_Toplevel_vec__Parquet_Pulse_Toplevel_page_encoding_stats_s
{
  Parquet_Pulse_Toplevel_page_encoding_stats *data;
  size_t len;
}
Parquet_Pulse_Toplevel_vec__Parquet_Pulse_Toplevel_page_encoding_stats;

typedef struct
FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_vec_Parquet_Pulse_Toplevel_page_encoding_stats_s
{
  FStar_Pervasives_Native_option__int64_t_tags tag;
  Parquet_Pulse_Toplevel_vec__Parquet_Pulse_Toplevel_page_encoding_stats v;
}
FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_vec_Parquet_Pulse_Toplevel_page_encoding_stats;

typedef struct FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_size_statistics_s
{
  FStar_Pervasives_Native_option__int64_t_tags tag;
  Parquet_Pulse_Toplevel_size_statistics v;
}
FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_size_statistics;

typedef struct FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_geospatial_statistics_s
{
  FStar_Pervasives_Native_option__int64_t_tags tag;
  Parquet_Pulse_Toplevel_geospatial_statistics v;
}
FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_geospatial_statistics;

typedef struct Parquet_Pulse_Toplevel_column_meta_data_s
{
  Parquet_Pulse_Toplevel_physical_type physical_type;
  Parquet_Pulse_Toplevel_vec__Parquet_Pulse_Toplevel_encoding encodings;
  Parquet_Pulse_Toplevel_vec__Prims_string path_in_schema;
  Parquet_Pulse_Toplevel_compression_codec codec;
  int64_t num_values3;
  int64_t total_uncompressed_size;
  int64_t total_compressed_size;
  FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_vec_Parquet_Pulse_Toplevel_key_value
  key_value_metadata;
  int64_t data_page_offset;
  FStar_Pervasives_Native_option__int64_t index_page_offset;
  FStar_Pervasives_Native_option__int64_t dictionary_page_offset;
  FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_statistics statistics2;
  FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_vec_Parquet_Pulse_Toplevel_page_encoding_stats
  encoding_stats;
  FStar_Pervasives_Native_option__int64_t bloom_filter_offset;
  FStar_Pervasives_Native_option__int32_t bloom_filter_length;
  FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_size_statistics size_statistics;
  FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_geospatial_statistics
  geospatial_statistics;
}
Parquet_Pulse_Toplevel_column_meta_data;

typedef void *Parquet_Pulse_Toplevel_encryption_with_footer_key;

typedef struct Parquet_Pulse_Toplevel_encryption_with_column_key_s
{
  Parquet_Pulse_Toplevel_vec__Prims_string path_in_schema1;
  FStar_Pervasives_Native_option__Prims_string key_metadata;
}
Parquet_Pulse_Toplevel_encryption_with_column_key;

#define Parquet_Pulse_Toplevel_ENCRYPTION_WITH_FOOTER_KEY 0
#define Parquet_Pulse_Toplevel_ENCRYPTION_WITH_COLUMN_KEY 1

typedef uint8_t Parquet_Pulse_Toplevel_column_crypto_meta_data_tags;

typedef struct Parquet_Pulse_Toplevel_column_crypto_meta_data_s
{
  Parquet_Pulse_Toplevel_column_crypto_meta_data_tags tag;
  Parquet_Pulse_Toplevel_encryption_with_column_key _0;
}
Parquet_Pulse_Toplevel_column_crypto_meta_data;

bool
Parquet_Pulse_Toplevel_uu___is_ENCRYPTION_WITH_FOOTER_KEY(
  Parquet_Pulse_Toplevel_column_crypto_meta_data projectee
);

bool
Parquet_Pulse_Toplevel_uu___is_ENCRYPTION_WITH_COLUMN_KEY(
  Parquet_Pulse_Toplevel_column_crypto_meta_data projectee
);

typedef struct FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_column_meta_data_s
{
  FStar_Pervasives_Native_option__int64_t_tags tag;
  Parquet_Pulse_Toplevel_column_meta_data v;
}
FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_column_meta_data;

typedef struct FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_column_crypto_meta_data_s
{
  FStar_Pervasives_Native_option__int64_t_tags tag;
  Parquet_Pulse_Toplevel_column_crypto_meta_data v;
}
FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_column_crypto_meta_data;

typedef struct Parquet_Pulse_Toplevel_column_chunk_s
{
  FStar_Pervasives_Native_option__Prims_string file_path;
  int64_t file_offset;
  FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_column_meta_data meta_data;
  FStar_Pervasives_Native_option__int64_t offset_index_offset;
  FStar_Pervasives_Native_option__int32_t offset_index_length;
  FStar_Pervasives_Native_option__int64_t column_index_offset;
  FStar_Pervasives_Native_option__int32_t column_index_length;
  FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_column_crypto_meta_data crypto_metadata;
  FStar_Pervasives_Native_option__Prims_string encrypted_column_metadata;
}
Parquet_Pulse_Toplevel_column_chunk;

typedef struct Parquet_Pulse_Toplevel_vec__Parquet_Pulse_Toplevel_column_chunk_s
{
  Parquet_Pulse_Toplevel_column_chunk *data;
  size_t len;
}
Parquet_Pulse_Toplevel_vec__Parquet_Pulse_Toplevel_column_chunk;

typedef struct Parquet_Pulse_Toplevel_vec__Parquet_Pulse_Toplevel_sorting_column_s
{
  Parquet_Pulse_Toplevel_sorting_column *data;
  size_t len;
}
Parquet_Pulse_Toplevel_vec__Parquet_Pulse_Toplevel_sorting_column;

typedef struct
FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_vec_Parquet_Pulse_Toplevel_sorting_column_s
{
  FStar_Pervasives_Native_option__int64_t_tags tag;
  Parquet_Pulse_Toplevel_vec__Parquet_Pulse_Toplevel_sorting_column v;
}
FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_vec_Parquet_Pulse_Toplevel_sorting_column;

typedef struct FStar_Pervasives_Native_option__int16_t_s
{
  FStar_Pervasives_Native_option__int64_t_tags tag;
  int16_t v;
}
FStar_Pervasives_Native_option__int16_t;

typedef struct Parquet_Pulse_Toplevel_row_group_s
{
  Parquet_Pulse_Toplevel_vec__Parquet_Pulse_Toplevel_column_chunk columns;
  int64_t total_byte_size;
  int64_t num_rows1;
  FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_vec_Parquet_Pulse_Toplevel_sorting_column
  sorting_columns;
  FStar_Pervasives_Native_option__int64_t file_offset1;
  FStar_Pervasives_Native_option__int64_t total_compressed_size1;
  FStar_Pervasives_Native_option__int16_t ordinal;
}
Parquet_Pulse_Toplevel_row_group;

typedef void *Parquet_Pulse_Toplevel_type_defined_order;

#define Parquet_Pulse_Toplevel_TYPE_ORDER 0

typedef uint8_t Parquet_Pulse_Toplevel_column_order;

bool Parquet_Pulse_Toplevel_uu___is_TYPE_ORDER(Parquet_Pulse_Toplevel_column_order projectee);

typedef struct Parquet_Pulse_Toplevel_page_location_s
{
  int64_t offset;
  int32_t compressed_page_size1;
  int64_t first_row_index;
}
Parquet_Pulse_Toplevel_page_location;

typedef struct Parquet_Pulse_Toplevel_vec__Parquet_Pulse_Toplevel_page_location_s
{
  Parquet_Pulse_Toplevel_page_location *data;
  size_t len;
}
Parquet_Pulse_Toplevel_vec__Parquet_Pulse_Toplevel_page_location;

typedef struct Parquet_Pulse_Toplevel_offset_index_s
{
  Parquet_Pulse_Toplevel_vec__Parquet_Pulse_Toplevel_page_location page_locations;
  FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_vec_int64_t
  unencoded_byte_array_data_bytes1;
}
Parquet_Pulse_Toplevel_offset_index;

typedef struct Parquet_Pulse_Toplevel_vec__bool_s
{
  bool *data;
  size_t len;
}
Parquet_Pulse_Toplevel_vec__bool;

typedef struct FStar_Pervasives_Native_option___int64_t__s
{
  FStar_Pervasives_Native_option__int64_t_tags tag;
  int64_t *v;
}
FStar_Pervasives_Native_option___int64_t_;

typedef struct Parquet_Pulse_Toplevel_column_index_s
{
  Parquet_Pulse_Toplevel_vec__bool null_pages;
  Parquet_Pulse_Toplevel_vec__Prims_string min_values;
  Parquet_Pulse_Toplevel_vec__Prims_string max_values;
  Parquet_Pulse_Toplevel_boundary_order boundary_order;
  FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_vec_int64_t null_counts;
  FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_vec_int64_t repetition_level_histograms;
  FStar_Pervasives_Native_option___int64_t_ definition_level_histograms;
}
Parquet_Pulse_Toplevel_column_index;

typedef struct Parquet_Pulse_Toplevel_aes_gcm_v1_s
{
  FStar_Pervasives_Native_option__Prims_string aad_prefix;
  FStar_Pervasives_Native_option__Prims_string aad_file_unique;
  FStar_Pervasives_Native_option__bool supply_aad_prefix;
}
Parquet_Pulse_Toplevel_aes_gcm_v1;

typedef struct Parquet_Pulse_Toplevel_aes_gcm_ctr_v1_s
{
  FStar_Pervasives_Native_option__Prims_string aad_prefix1;
  FStar_Pervasives_Native_option__Prims_string aad_file_unique1;
  FStar_Pervasives_Native_option__bool supply_aad_prefix1;
}
Parquet_Pulse_Toplevel_aes_gcm_ctr_v1;

#define Parquet_Pulse_Toplevel_AES_GCM_V1 0
#define Parquet_Pulse_Toplevel_AES_GCM_CTR_V1 1

typedef uint8_t Parquet_Pulse_Toplevel_encryption_algorithm_tags;

typedef struct Parquet_Pulse_Toplevel_encryption_algorithm_s
{
  Parquet_Pulse_Toplevel_encryption_algorithm_tags tag;
  union {
    Parquet_Pulse_Toplevel_aes_gcm_v1 case_AES_GCM_V1;
    Parquet_Pulse_Toplevel_aes_gcm_ctr_v1 case_AES_GCM_CTR_V1;
  }
  ;
}
Parquet_Pulse_Toplevel_encryption_algorithm;

bool
Parquet_Pulse_Toplevel_uu___is_AES_GCM_V1(
  Parquet_Pulse_Toplevel_encryption_algorithm projectee
);

bool
Parquet_Pulse_Toplevel_uu___is_AES_GCM_CTR_V1(
  Parquet_Pulse_Toplevel_encryption_algorithm projectee
);

typedef struct Parquet_Pulse_Toplevel_vec__Parquet_Pulse_Toplevel_schema_element_s
{
  Parquet_Pulse_Toplevel_schema_element *data;
  size_t len;
}
Parquet_Pulse_Toplevel_vec__Parquet_Pulse_Toplevel_schema_element;

typedef struct Parquet_Pulse_Toplevel_vec__Parquet_Pulse_Toplevel_row_group_s
{
  Parquet_Pulse_Toplevel_row_group *data;
  size_t len;
}
Parquet_Pulse_Toplevel_vec__Parquet_Pulse_Toplevel_row_group;

typedef struct Parquet_Pulse_Toplevel_vec__Parquet_Pulse_Toplevel_column_order_s
{
  Parquet_Pulse_Toplevel_column_order *data;
  size_t len;
}
Parquet_Pulse_Toplevel_vec__Parquet_Pulse_Toplevel_column_order;

typedef struct
FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_vec_Parquet_Pulse_Toplevel_column_order_s
{
  FStar_Pervasives_Native_option__int64_t_tags tag;
  Parquet_Pulse_Toplevel_vec__Parquet_Pulse_Toplevel_column_order v;
}
FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_vec_Parquet_Pulse_Toplevel_column_order;

typedef struct FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_encryption_algorithm_s
{
  FStar_Pervasives_Native_option__int64_t_tags tag;
  Parquet_Pulse_Toplevel_encryption_algorithm v;
}
FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_encryption_algorithm;

typedef struct Parquet_Pulse_Toplevel_file_meta_data_s
{
  int32_t version;
  Parquet_Pulse_Toplevel_vec__Parquet_Pulse_Toplevel_schema_element schema;
  int64_t num_rows2;
  Parquet_Pulse_Toplevel_vec__Parquet_Pulse_Toplevel_row_group row_groups;
  FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_vec_Parquet_Pulse_Toplevel_key_value
  key_value_metadata1;
  FStar_Pervasives_Native_option__Prims_string created_by;
  FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_vec_Parquet_Pulse_Toplevel_column_order
  column_orders;
  FStar_Pervasives_Native_option__Parquet_Pulse_Toplevel_encryption_algorithm
  encryption_algorithm;
  FStar_Pervasives_Native_option__Prims_string footer_signing_key_metadata;
}
Parquet_Pulse_Toplevel_file_meta_data;

typedef struct Parquet_Pulse_Toplevel_file_crypto_meta_data_s
{
  Parquet_Pulse_Toplevel_encryption_algorithm encryption_algorithm1;
  FStar_Pervasives_Native_option__Prims_string key_metadata1;
}
Parquet_Pulse_Toplevel_file_crypto_meta_data;


#define Parquet_Pulse_Toplevel_H_DEFINED
#endif /* Parquet_Pulse_Toplevel_H */
