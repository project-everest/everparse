/**
 * Autogenerated by Thrift Compiler (0.22.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef PARQUET_TYPES_H
#define PARQUET_TYPES_H

/* base includes */
#include <glib-object.h>
#include <thrift/c_glib/thrift_struct.h>
#include <thrift/c_glib/protocol/thrift_protocol.h>
/* custom thrift includes */

/* begin types */

enum _Type {
  TYPE_BOOLEAN = 0,
  TYPE_INT32 = 1,
  TYPE_INT64 = 2,
  TYPE_INT96 = 3,
  TYPE_FLOAT = 4,
  TYPE_DOUBLE = 5,
  TYPE_BYTE_ARRAY = 6,
  TYPE_FIXED_LEN_BYTE_ARRAY = 7
};
typedef enum _Type Type;

/* return the name of the constant */
const char *
toString_Type(int value); 

enum _ConvertedType {
  CONVERTED_TYPE_UTF8 = 0,
  CONVERTED_TYPE_MAP = 1,
  CONVERTED_TYPE_MAP_KEY_VALUE = 2,
  CONVERTED_TYPE_LIST = 3,
  CONVERTED_TYPE_ENUM = 4,
  CONVERTED_TYPE_DECIMAL = 5,
  CONVERTED_TYPE_DATE = 6,
  CONVERTED_TYPE_TIME_MILLIS = 7,
  CONVERTED_TYPE_TIME_MICROS = 8,
  CONVERTED_TYPE_TIMESTAMP_MILLIS = 9,
  CONVERTED_TYPE_TIMESTAMP_MICROS = 10,
  CONVERTED_TYPE_UINT_8 = 11,
  CONVERTED_TYPE_UINT_16 = 12,
  CONVERTED_TYPE_UINT_32 = 13,
  CONVERTED_TYPE_UINT_64 = 14,
  CONVERTED_TYPE_INT_8 = 15,
  CONVERTED_TYPE_INT_16 = 16,
  CONVERTED_TYPE_INT_32 = 17,
  CONVERTED_TYPE_INT_64 = 18,
  CONVERTED_TYPE_JSON = 19,
  CONVERTED_TYPE_BSON = 20,
  CONVERTED_TYPE_INTERVAL = 21
};
typedef enum _ConvertedType ConvertedType;

/* return the name of the constant */
const char *
toString_ConvertedType(int value); 

enum _FieldRepetitionType {
  FIELD_REPETITION_TYPE_REQUIRED = 0,
  FIELD_REPETITION_TYPE_OPTIONAL = 1,
  FIELD_REPETITION_TYPE_REPEATED = 2
};
typedef enum _FieldRepetitionType FieldRepetitionType;

/* return the name of the constant */
const char *
toString_FieldRepetitionType(int value); 

enum _EdgeInterpolationAlgorithm {
  EDGE_INTERPOLATION_ALGORITHM_SPHERICAL = 0,
  EDGE_INTERPOLATION_ALGORITHM_VINCENTY = 1,
  EDGE_INTERPOLATION_ALGORITHM_THOMAS = 2,
  EDGE_INTERPOLATION_ALGORITHM_ANDOYER = 3,
  EDGE_INTERPOLATION_ALGORITHM_KARNEY = 4
};
typedef enum _EdgeInterpolationAlgorithm EdgeInterpolationAlgorithm;

/* return the name of the constant */
const char *
toString_EdgeInterpolationAlgorithm(int value); 

enum _Encoding {
  ENCODING_PLAIN = 0,
  ENCODING_PLAIN_DICTIONARY = 2,
  ENCODING_RLE = 3,
  ENCODING_BIT_PACKED = 4,
  ENCODING_DELTA_BINARY_PACKED = 5,
  ENCODING_DELTA_LENGTH_BYTE_ARRAY = 6,
  ENCODING_DELTA_BYTE_ARRAY = 7,
  ENCODING_RLE_DICTIONARY = 8,
  ENCODING_BYTE_STREAM_SPLIT = 9
};
typedef enum _Encoding Encoding;

/* return the name of the constant */
const char *
toString_Encoding(int value); 

enum _CompressionCodec {
  COMPRESSION_CODEC_UNCOMPRESSED = 0,
  COMPRESSION_CODEC_SNAPPY = 1,
  COMPRESSION_CODEC_GZIP = 2,
  COMPRESSION_CODEC_LZO = 3,
  COMPRESSION_CODEC_BROTLI = 4,
  COMPRESSION_CODEC_LZ4 = 5,
  COMPRESSION_CODEC_ZSTD = 6,
  COMPRESSION_CODEC_LZ4_RAW = 7
};
typedef enum _CompressionCodec CompressionCodec;

/* return the name of the constant */
const char *
toString_CompressionCodec(int value); 

enum _PageType {
  PAGE_TYPE_DATA_PAGE = 0,
  PAGE_TYPE_INDEX_PAGE = 1,
  PAGE_TYPE_DICTIONARY_PAGE = 2,
  PAGE_TYPE_DATA_PAGE_V2 = 3
};
typedef enum _PageType PageType;

/* return the name of the constant */
const char *
toString_PageType(int value); 

enum _BoundaryOrder {
  BOUNDARY_ORDER_UNORDERED = 0,
  BOUNDARY_ORDER_ASCENDING = 1,
  BOUNDARY_ORDER_DESCENDING = 2
};
typedef enum _BoundaryOrder BoundaryOrder;

/* return the name of the constant */
const char *
toString_BoundaryOrder(int value); 

/* struct SizeStatistics */
struct _SizeStatistics
{ 
  ThriftStruct parent; 

  /* public */
  gint64 unencoded_byte_array_data_bytes;
  gboolean __isset_unencoded_byte_array_data_bytes;
  GArray * repetition_level_histogram;
  gboolean __isset_repetition_level_histogram;
  GArray * definition_level_histogram;
  gboolean __isset_definition_level_histogram;
};
typedef struct _SizeStatistics SizeStatistics;

struct _SizeStatisticsClass
{
  ThriftStructClass parent;
};
typedef struct _SizeStatisticsClass SizeStatisticsClass;

GType size_statistics_get_type (void);
#define TYPE_SIZE_STATISTICS (size_statistics_get_type())
#define SIZE_STATISTICS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_SIZE_STATISTICS, SizeStatistics))
#define SIZE_STATISTICS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_SIZE_STATISTICS, SizeStatisticsClass))
#define IS_SIZE_STATISTICS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_SIZE_STATISTICS))
#define IS_SIZE_STATISTICS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_SIZE_STATISTICS))
#define SIZE_STATISTICS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_SIZE_STATISTICS, SizeStatisticsClass))

/* struct BoundingBox */
struct _BoundingBox
{ 
  ThriftStruct parent; 

  /* public */
  gdouble xmin;
  gdouble xmax;
  gdouble ymin;
  gdouble ymax;
  gdouble zmin;
  gboolean __isset_zmin;
  gdouble zmax;
  gboolean __isset_zmax;
  gdouble mmin;
  gboolean __isset_mmin;
  gdouble mmax;
  gboolean __isset_mmax;
};
typedef struct _BoundingBox BoundingBox;

struct _BoundingBoxClass
{
  ThriftStructClass parent;
};
typedef struct _BoundingBoxClass BoundingBoxClass;

GType bounding_box_get_type (void);
#define TYPE_BOUNDING_BOX (bounding_box_get_type())
#define BOUNDING_BOX(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_BOUNDING_BOX, BoundingBox))
#define BOUNDING_BOX_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_BOUNDING_BOX, BoundingBoxClass))
#define IS_BOUNDING_BOX(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_BOUNDING_BOX))
#define IS_BOUNDING_BOX_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_BOUNDING_BOX))
#define BOUNDING_BOX_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_BOUNDING_BOX, BoundingBoxClass))

/* struct GeospatialStatistics */
struct _GeospatialStatistics
{ 
  ThriftStruct parent; 

  /* public */
  BoundingBox * bbox;
  gboolean __isset_bbox;
  GArray * geospatial_types;
  gboolean __isset_geospatial_types;
};
typedef struct _GeospatialStatistics GeospatialStatistics;

struct _GeospatialStatisticsClass
{
  ThriftStructClass parent;
};
typedef struct _GeospatialStatisticsClass GeospatialStatisticsClass;

GType geospatial_statistics_get_type (void);
#define TYPE_GEOSPATIAL_STATISTICS (geospatial_statistics_get_type())
#define GEOSPATIAL_STATISTICS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_GEOSPATIAL_STATISTICS, GeospatialStatistics))
#define GEOSPATIAL_STATISTICS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_GEOSPATIAL_STATISTICS, GeospatialStatisticsClass))
#define IS_GEOSPATIAL_STATISTICS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_GEOSPATIAL_STATISTICS))
#define IS_GEOSPATIAL_STATISTICS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_GEOSPATIAL_STATISTICS))
#define GEOSPATIAL_STATISTICS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_GEOSPATIAL_STATISTICS, GeospatialStatisticsClass))

/* struct Statistics */
struct _Statistics
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * max;
  gboolean __isset_max;
  GByteArray * min;
  gboolean __isset_min;
  gint64 null_count;
  gboolean __isset_null_count;
  gint64 distinct_count;
  gboolean __isset_distinct_count;
  GByteArray * max_value;
  gboolean __isset_max_value;
  GByteArray * min_value;
  gboolean __isset_min_value;
  gboolean is_max_value_exact;
  gboolean __isset_is_max_value_exact;
  gboolean is_min_value_exact;
  gboolean __isset_is_min_value_exact;
};
typedef struct _Statistics Statistics;

struct _StatisticsClass
{
  ThriftStructClass parent;
};
typedef struct _StatisticsClass StatisticsClass;

GType statistics_get_type (void);
#define TYPE_STATISTICS (statistics_get_type())
#define STATISTICS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_STATISTICS, Statistics))
#define STATISTICS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_STATISTICS, StatisticsClass))
#define IS_STATISTICS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_STATISTICS))
#define IS_STATISTICS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_STATISTICS))
#define STATISTICS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_STATISTICS, StatisticsClass))

/* struct StringType */
struct _StringType
{ 
  ThriftStruct parent; 

  /* public */
};
typedef struct _StringType StringType;

struct _StringTypeClass
{
  ThriftStructClass parent;
};
typedef struct _StringTypeClass StringTypeClass;

GType string_type_get_type (void);
#define TYPE_STRING_TYPE (string_type_get_type())
#define STRING_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_STRING_TYPE, StringType))
#define STRING_TYPE_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_STRING_TYPE, StringTypeClass))
#define IS_STRING_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_STRING_TYPE))
#define IS_STRING_TYPE_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_STRING_TYPE))
#define STRING_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_STRING_TYPE, StringTypeClass))

/* struct UUIDType */
struct _UUIDType
{ 
  ThriftStruct parent; 

  /* public */
};
typedef struct _UUIDType UUIDType;

struct _UUIDTypeClass
{
  ThriftStructClass parent;
};
typedef struct _UUIDTypeClass UUIDTypeClass;

GType u_u_i_d_type_get_type (void);
#define TYPE_U_U_I_D_TYPE (u_u_i_d_type_get_type())
#define U_U_I_D_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_U_U_I_D_TYPE, UUIDType))
#define U_U_I_D_TYPE_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_U_U_I_D_TYPE, UUIDTypeClass))
#define IS_U_U_I_D_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_U_U_I_D_TYPE))
#define IS_U_U_I_D_TYPE_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_U_U_I_D_TYPE))
#define U_U_I_D_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_U_U_I_D_TYPE, UUIDTypeClass))

/* struct MapType */
struct _MapType
{ 
  ThriftStruct parent; 

  /* public */
};
typedef struct _MapType MapType;

struct _MapTypeClass
{
  ThriftStructClass parent;
};
typedef struct _MapTypeClass MapTypeClass;

GType map_type_get_type (void);
#define TYPE_MAP_TYPE (map_type_get_type())
#define MAP_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_MAP_TYPE, MapType))
#define MAP_TYPE_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_MAP_TYPE, MapTypeClass))
#define IS_MAP_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_MAP_TYPE))
#define IS_MAP_TYPE_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_MAP_TYPE))
#define MAP_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_MAP_TYPE, MapTypeClass))

/* struct ListType */
struct _ListType
{ 
  ThriftStruct parent; 

  /* public */
};
typedef struct _ListType ListType;

struct _ListTypeClass
{
  ThriftStructClass parent;
};
typedef struct _ListTypeClass ListTypeClass;

GType list_type_get_type (void);
#define TYPE_LIST_TYPE (list_type_get_type())
#define LIST_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_LIST_TYPE, ListType))
#define LIST_TYPE_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_LIST_TYPE, ListTypeClass))
#define IS_LIST_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_LIST_TYPE))
#define IS_LIST_TYPE_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_LIST_TYPE))
#define LIST_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_LIST_TYPE, ListTypeClass))

/* struct EnumType */
struct _EnumType
{ 
  ThriftStruct parent; 

  /* public */
};
typedef struct _EnumType EnumType;

struct _EnumTypeClass
{
  ThriftStructClass parent;
};
typedef struct _EnumTypeClass EnumTypeClass;

GType enum_type_get_type (void);
#define TYPE_ENUM_TYPE (enum_type_get_type())
#define ENUM_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_ENUM_TYPE, EnumType))
#define ENUM_TYPE_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_ENUM_TYPE, EnumTypeClass))
#define IS_ENUM_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_ENUM_TYPE))
#define IS_ENUM_TYPE_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_ENUM_TYPE))
#define ENUM_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_ENUM_TYPE, EnumTypeClass))

/* struct DateType */
struct _DateType
{ 
  ThriftStruct parent; 

  /* public */
};
typedef struct _DateType DateType;

struct _DateTypeClass
{
  ThriftStructClass parent;
};
typedef struct _DateTypeClass DateTypeClass;

GType date_type_get_type (void);
#define TYPE_DATE_TYPE (date_type_get_type())
#define DATE_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_DATE_TYPE, DateType))
#define DATE_TYPE_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_DATE_TYPE, DateTypeClass))
#define IS_DATE_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_DATE_TYPE))
#define IS_DATE_TYPE_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_DATE_TYPE))
#define DATE_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_DATE_TYPE, DateTypeClass))

/* struct Float16Type */
struct _Float16Type
{ 
  ThriftStruct parent; 

  /* public */
};
typedef struct _Float16Type Float16Type;

struct _Float16TypeClass
{
  ThriftStructClass parent;
};
typedef struct _Float16TypeClass Float16TypeClass;

GType float16_type_get_type (void);
#define TYPE_FLOAT16_TYPE (float16_type_get_type())
#define FLOAT16_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_FLOAT16_TYPE, Float16Type))
#define FLOAT16_TYPE_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_FLOAT16_TYPE, Float16TypeClass))
#define IS_FLOAT16_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_FLOAT16_TYPE))
#define IS_FLOAT16_TYPE_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_FLOAT16_TYPE))
#define FLOAT16_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_FLOAT16_TYPE, Float16TypeClass))

/* struct NullType */
struct _NullType
{ 
  ThriftStruct parent; 

  /* public */
};
typedef struct _NullType NullType;

struct _NullTypeClass
{
  ThriftStructClass parent;
};
typedef struct _NullTypeClass NullTypeClass;

GType null_type_get_type (void);
#define TYPE_NULL_TYPE (null_type_get_type())
#define NULL_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_NULL_TYPE, NullType))
#define NULL_TYPE_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_NULL_TYPE, NullTypeClass))
#define IS_NULL_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_NULL_TYPE))
#define IS_NULL_TYPE_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_NULL_TYPE))
#define NULL_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_NULL_TYPE, NullTypeClass))

/* struct DecimalType */
struct _DecimalType
{ 
  ThriftStruct parent; 

  /* public */
  gint32 scale;
  gint32 precision;
};
typedef struct _DecimalType DecimalType;

struct _DecimalTypeClass
{
  ThriftStructClass parent;
};
typedef struct _DecimalTypeClass DecimalTypeClass;

GType decimal_type_get_type (void);
#define TYPE_DECIMAL_TYPE (decimal_type_get_type())
#define DECIMAL_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_DECIMAL_TYPE, DecimalType))
#define DECIMAL_TYPE_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_DECIMAL_TYPE, DecimalTypeClass))
#define IS_DECIMAL_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_DECIMAL_TYPE))
#define IS_DECIMAL_TYPE_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_DECIMAL_TYPE))
#define DECIMAL_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_DECIMAL_TYPE, DecimalTypeClass))

/* struct MilliSeconds */
struct _MilliSeconds
{ 
  ThriftStruct parent; 

  /* public */
};
typedef struct _MilliSeconds MilliSeconds;

struct _MilliSecondsClass
{
  ThriftStructClass parent;
};
typedef struct _MilliSecondsClass MilliSecondsClass;

GType milli_seconds_get_type (void);
#define TYPE_MILLI_SECONDS (milli_seconds_get_type())
#define MILLI_SECONDS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_MILLI_SECONDS, MilliSeconds))
#define MILLI_SECONDS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_MILLI_SECONDS, MilliSecondsClass))
#define IS_MILLI_SECONDS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_MILLI_SECONDS))
#define IS_MILLI_SECONDS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_MILLI_SECONDS))
#define MILLI_SECONDS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_MILLI_SECONDS, MilliSecondsClass))

/* struct MicroSeconds */
struct _MicroSeconds
{ 
  ThriftStruct parent; 

  /* public */
};
typedef struct _MicroSeconds MicroSeconds;

struct _MicroSecondsClass
{
  ThriftStructClass parent;
};
typedef struct _MicroSecondsClass MicroSecondsClass;

GType micro_seconds_get_type (void);
#define TYPE_MICRO_SECONDS (micro_seconds_get_type())
#define MICRO_SECONDS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_MICRO_SECONDS, MicroSeconds))
#define MICRO_SECONDS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_MICRO_SECONDS, MicroSecondsClass))
#define IS_MICRO_SECONDS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_MICRO_SECONDS))
#define IS_MICRO_SECONDS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_MICRO_SECONDS))
#define MICRO_SECONDS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_MICRO_SECONDS, MicroSecondsClass))

/* struct NanoSeconds */
struct _NanoSeconds
{ 
  ThriftStruct parent; 

  /* public */
};
typedef struct _NanoSeconds NanoSeconds;

struct _NanoSecondsClass
{
  ThriftStructClass parent;
};
typedef struct _NanoSecondsClass NanoSecondsClass;

GType nano_seconds_get_type (void);
#define TYPE_NANO_SECONDS (nano_seconds_get_type())
#define NANO_SECONDS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_NANO_SECONDS, NanoSeconds))
#define NANO_SECONDS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_NANO_SECONDS, NanoSecondsClass))
#define IS_NANO_SECONDS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_NANO_SECONDS))
#define IS_NANO_SECONDS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_NANO_SECONDS))
#define NANO_SECONDS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_NANO_SECONDS, NanoSecondsClass))

/* struct TimeUnit */
struct _TimeUnit
{ 
  ThriftStruct parent; 

  /* public */
  MilliSeconds * MILLIS;
  gboolean __isset_MILLIS;
  MicroSeconds * MICROS;
  gboolean __isset_MICROS;
  NanoSeconds * NANOS;
  gboolean __isset_NANOS;
};
typedef struct _TimeUnit TimeUnit;

struct _TimeUnitClass
{
  ThriftStructClass parent;
};
typedef struct _TimeUnitClass TimeUnitClass;

GType time_unit_get_type (void);
#define TYPE_TIME_UNIT (time_unit_get_type())
#define TIME_UNIT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_TIME_UNIT, TimeUnit))
#define TIME_UNIT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_TIME_UNIT, TimeUnitClass))
#define IS_TIME_UNIT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_TIME_UNIT))
#define IS_TIME_UNIT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_TIME_UNIT))
#define TIME_UNIT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_TIME_UNIT, TimeUnitClass))

/* struct TimestampType */
struct _TimestampType
{ 
  ThriftStruct parent; 

  /* public */
  gboolean isAdjustedToUTC;
  TimeUnit * unit;
};
typedef struct _TimestampType TimestampType;

struct _TimestampTypeClass
{
  ThriftStructClass parent;
};
typedef struct _TimestampTypeClass TimestampTypeClass;

GType timestamp_type_get_type (void);
#define TYPE_TIMESTAMP_TYPE (timestamp_type_get_type())
#define TIMESTAMP_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_TIMESTAMP_TYPE, TimestampType))
#define TIMESTAMP_TYPE_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_TIMESTAMP_TYPE, TimestampTypeClass))
#define IS_TIMESTAMP_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_TIMESTAMP_TYPE))
#define IS_TIMESTAMP_TYPE_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_TIMESTAMP_TYPE))
#define TIMESTAMP_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_TIMESTAMP_TYPE, TimestampTypeClass))

/* struct TimeType */
struct _TimeType
{ 
  ThriftStruct parent; 

  /* public */
  gboolean isAdjustedToUTC;
  TimeUnit * unit;
};
typedef struct _TimeType TimeType;

struct _TimeTypeClass
{
  ThriftStructClass parent;
};
typedef struct _TimeTypeClass TimeTypeClass;

GType time_type_get_type (void);
#define TYPE_TIME_TYPE (time_type_get_type())
#define TIME_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_TIME_TYPE, TimeType))
#define TIME_TYPE_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_TIME_TYPE, TimeTypeClass))
#define IS_TIME_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_TIME_TYPE))
#define IS_TIME_TYPE_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_TIME_TYPE))
#define TIME_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_TIME_TYPE, TimeTypeClass))

/* struct IntType */
struct _IntType
{ 
  ThriftStruct parent; 

  /* public */
  gint8 bitWidth;
  gboolean isSigned;
};
typedef struct _IntType IntType;

struct _IntTypeClass
{
  ThriftStructClass parent;
};
typedef struct _IntTypeClass IntTypeClass;

GType int_type_get_type (void);
#define TYPE_INT_TYPE (int_type_get_type())
#define INT_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_INT_TYPE, IntType))
#define INT_TYPE_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_INT_TYPE, IntTypeClass))
#define IS_INT_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_INT_TYPE))
#define IS_INT_TYPE_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_INT_TYPE))
#define INT_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_INT_TYPE, IntTypeClass))

/* struct JsonType */
struct _JsonType
{ 
  ThriftStruct parent; 

  /* public */
};
typedef struct _JsonType JsonType;

struct _JsonTypeClass
{
  ThriftStructClass parent;
};
typedef struct _JsonTypeClass JsonTypeClass;

GType json_type_get_type (void);
#define TYPE_JSON_TYPE (json_type_get_type())
#define JSON_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_JSON_TYPE, JsonType))
#define JSON_TYPE_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_JSON_TYPE, JsonTypeClass))
#define IS_JSON_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_JSON_TYPE))
#define IS_JSON_TYPE_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_JSON_TYPE))
#define JSON_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_JSON_TYPE, JsonTypeClass))

/* struct BsonType */
struct _BsonType
{ 
  ThriftStruct parent; 

  /* public */
};
typedef struct _BsonType BsonType;

struct _BsonTypeClass
{
  ThriftStructClass parent;
};
typedef struct _BsonTypeClass BsonTypeClass;

GType bson_type_get_type (void);
#define TYPE_BSON_TYPE (bson_type_get_type())
#define BSON_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_BSON_TYPE, BsonType))
#define BSON_TYPE_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_BSON_TYPE, BsonTypeClass))
#define IS_BSON_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_BSON_TYPE))
#define IS_BSON_TYPE_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_BSON_TYPE))
#define BSON_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_BSON_TYPE, BsonTypeClass))

/* struct VariantType */
struct _VariantType
{ 
  ThriftStruct parent; 

  /* public */
  gint8 specification_version;
  gboolean __isset_specification_version;
};
typedef struct _VariantType VariantType;

struct _VariantTypeClass
{
  ThriftStructClass parent;
};
typedef struct _VariantTypeClass VariantTypeClass;

GType variant_type_get_type (void);
#define TYPE_VARIANT_TYPE (variant_type_get_type())
#define VARIANT_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_VARIANT_TYPE, VariantType))
#define VARIANT_TYPE_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_VARIANT_TYPE, VariantTypeClass))
#define IS_VARIANT_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_VARIANT_TYPE))
#define IS_VARIANT_TYPE_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_VARIANT_TYPE))
#define VARIANT_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_VARIANT_TYPE, VariantTypeClass))

/* struct GeometryType */
struct _GeometryType
{ 
  ThriftStruct parent; 

  /* public */
  gchar * crs;
  gboolean __isset_crs;
};
typedef struct _GeometryType GeometryType;

struct _GeometryTypeClass
{
  ThriftStructClass parent;
};
typedef struct _GeometryTypeClass GeometryTypeClass;

GType geometry_type_get_type (void);
#define TYPE_GEOMETRY_TYPE (geometry_type_get_type())
#define GEOMETRY_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_GEOMETRY_TYPE, GeometryType))
#define GEOMETRY_TYPE_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_GEOMETRY_TYPE, GeometryTypeClass))
#define IS_GEOMETRY_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_GEOMETRY_TYPE))
#define IS_GEOMETRY_TYPE_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_GEOMETRY_TYPE))
#define GEOMETRY_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_GEOMETRY_TYPE, GeometryTypeClass))

/* struct GeographyType */
struct _GeographyType
{ 
  ThriftStruct parent; 

  /* public */
  gchar * crs;
  gboolean __isset_crs;
  EdgeInterpolationAlgorithm algorithm;
  gboolean __isset_algorithm;
};
typedef struct _GeographyType GeographyType;

struct _GeographyTypeClass
{
  ThriftStructClass parent;
};
typedef struct _GeographyTypeClass GeographyTypeClass;

GType geography_type_get_type (void);
#define TYPE_GEOGRAPHY_TYPE (geography_type_get_type())
#define GEOGRAPHY_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_GEOGRAPHY_TYPE, GeographyType))
#define GEOGRAPHY_TYPE_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_GEOGRAPHY_TYPE, GeographyTypeClass))
#define IS_GEOGRAPHY_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_GEOGRAPHY_TYPE))
#define IS_GEOGRAPHY_TYPE_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_GEOGRAPHY_TYPE))
#define GEOGRAPHY_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_GEOGRAPHY_TYPE, GeographyTypeClass))

/* struct LogicalType */
struct _LogicalType
{ 
  ThriftStruct parent; 

  /* public */
  StringType * STRING;
  gboolean __isset_STRING;
  MapType * MAP;
  gboolean __isset_MAP;
  ListType * LIST;
  gboolean __isset_LIST;
  EnumType * ENUM;
  gboolean __isset_ENUM;
  DecimalType * DECIMAL;
  gboolean __isset_DECIMAL;
  DateType * DATE;
  gboolean __isset_DATE;
  TimeType * TIME;
  gboolean __isset_TIME;
  TimestampType * TIMESTAMP;
  gboolean __isset_TIMESTAMP;
  IntType * INTEGER;
  gboolean __isset_INTEGER;
  NullType * UNKNOWN;
  gboolean __isset_UNKNOWN;
  JsonType * JSON;
  gboolean __isset_JSON;
  BsonType * BSON;
  gboolean __isset_BSON;
  UUIDType * UUID;
  gboolean __isset_UUID;
  Float16Type * FLOAT16;
  gboolean __isset_FLOAT16;
  VariantType * VARIANT;
  gboolean __isset_VARIANT;
  GeometryType * GEOMETRY;
  gboolean __isset_GEOMETRY;
  GeographyType * GEOGRAPHY;
  gboolean __isset_GEOGRAPHY;
};
typedef struct _LogicalType LogicalType;

struct _LogicalTypeClass
{
  ThriftStructClass parent;
};
typedef struct _LogicalTypeClass LogicalTypeClass;

GType logical_type_get_type (void);
#define TYPE_LOGICAL_TYPE (logical_type_get_type())
#define LOGICAL_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_LOGICAL_TYPE, LogicalType))
#define LOGICAL_TYPE_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_LOGICAL_TYPE, LogicalTypeClass))
#define IS_LOGICAL_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_LOGICAL_TYPE))
#define IS_LOGICAL_TYPE_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_LOGICAL_TYPE))
#define LOGICAL_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_LOGICAL_TYPE, LogicalTypeClass))

/* struct SchemaElement */
struct _SchemaElement
{ 
  ThriftStruct parent; 

  /* public */
  Type type;
  gboolean __isset_type;
  gint32 type_length;
  gboolean __isset_type_length;
  FieldRepetitionType repetition_type;
  gboolean __isset_repetition_type;
  gchar * name;
  gint32 num_children;
  gboolean __isset_num_children;
  ConvertedType converted_type;
  gboolean __isset_converted_type;
  gint32 scale;
  gboolean __isset_scale;
  gint32 precision;
  gboolean __isset_precision;
  gint32 field_id;
  gboolean __isset_field_id;
  LogicalType * logicalType;
  gboolean __isset_logicalType;
};
typedef struct _SchemaElement SchemaElement;

struct _SchemaElementClass
{
  ThriftStructClass parent;
};
typedef struct _SchemaElementClass SchemaElementClass;

GType schema_element_get_type (void);
#define TYPE_SCHEMA_ELEMENT (schema_element_get_type())
#define SCHEMA_ELEMENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_SCHEMA_ELEMENT, SchemaElement))
#define SCHEMA_ELEMENT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_SCHEMA_ELEMENT, SchemaElementClass))
#define IS_SCHEMA_ELEMENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_SCHEMA_ELEMENT))
#define IS_SCHEMA_ELEMENT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_SCHEMA_ELEMENT))
#define SCHEMA_ELEMENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_SCHEMA_ELEMENT, SchemaElementClass))

/* struct DataPageHeader */
struct _DataPageHeader
{ 
  ThriftStruct parent; 

  /* public */
  gint32 num_values;
  Encoding encoding;
  Encoding definition_level_encoding;
  Encoding repetition_level_encoding;
  Statistics * statistics;
  gboolean __isset_statistics;
};
typedef struct _DataPageHeader DataPageHeader;

struct _DataPageHeaderClass
{
  ThriftStructClass parent;
};
typedef struct _DataPageHeaderClass DataPageHeaderClass;

GType data_page_header_get_type (void);
#define TYPE_DATA_PAGE_HEADER (data_page_header_get_type())
#define DATA_PAGE_HEADER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_DATA_PAGE_HEADER, DataPageHeader))
#define DATA_PAGE_HEADER_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_DATA_PAGE_HEADER, DataPageHeaderClass))
#define IS_DATA_PAGE_HEADER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_DATA_PAGE_HEADER))
#define IS_DATA_PAGE_HEADER_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_DATA_PAGE_HEADER))
#define DATA_PAGE_HEADER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_DATA_PAGE_HEADER, DataPageHeaderClass))

/* struct IndexPageHeader */
struct _IndexPageHeader
{ 
  ThriftStruct parent; 

  /* public */
};
typedef struct _IndexPageHeader IndexPageHeader;

struct _IndexPageHeaderClass
{
  ThriftStructClass parent;
};
typedef struct _IndexPageHeaderClass IndexPageHeaderClass;

GType index_page_header_get_type (void);
#define TYPE_INDEX_PAGE_HEADER (index_page_header_get_type())
#define INDEX_PAGE_HEADER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_INDEX_PAGE_HEADER, IndexPageHeader))
#define INDEX_PAGE_HEADER_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_INDEX_PAGE_HEADER, IndexPageHeaderClass))
#define IS_INDEX_PAGE_HEADER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_INDEX_PAGE_HEADER))
#define IS_INDEX_PAGE_HEADER_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_INDEX_PAGE_HEADER))
#define INDEX_PAGE_HEADER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_INDEX_PAGE_HEADER, IndexPageHeaderClass))

/* struct DictionaryPageHeader */
struct _DictionaryPageHeader
{ 
  ThriftStruct parent; 

  /* public */
  gint32 num_values;
  Encoding encoding;
  gboolean is_sorted;
  gboolean __isset_is_sorted;
};
typedef struct _DictionaryPageHeader DictionaryPageHeader;

struct _DictionaryPageHeaderClass
{
  ThriftStructClass parent;
};
typedef struct _DictionaryPageHeaderClass DictionaryPageHeaderClass;

GType dictionary_page_header_get_type (void);
#define TYPE_DICTIONARY_PAGE_HEADER (dictionary_page_header_get_type())
#define DICTIONARY_PAGE_HEADER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_DICTIONARY_PAGE_HEADER, DictionaryPageHeader))
#define DICTIONARY_PAGE_HEADER_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_DICTIONARY_PAGE_HEADER, DictionaryPageHeaderClass))
#define IS_DICTIONARY_PAGE_HEADER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_DICTIONARY_PAGE_HEADER))
#define IS_DICTIONARY_PAGE_HEADER_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_DICTIONARY_PAGE_HEADER))
#define DICTIONARY_PAGE_HEADER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_DICTIONARY_PAGE_HEADER, DictionaryPageHeaderClass))

/* struct DataPageHeaderV2 */
struct _DataPageHeaderV2
{ 
  ThriftStruct parent; 

  /* public */
  gint32 num_values;
  gint32 num_nulls;
  gint32 num_rows;
  Encoding encoding;
  gint32 definition_levels_byte_length;
  gint32 repetition_levels_byte_length;
  gboolean is_compressed;
  gboolean __isset_is_compressed;
  Statistics * statistics;
  gboolean __isset_statistics;
};
typedef struct _DataPageHeaderV2 DataPageHeaderV2;

struct _DataPageHeaderV2Class
{
  ThriftStructClass parent;
};
typedef struct _DataPageHeaderV2Class DataPageHeaderV2Class;

GType data_page_header_v2_get_type (void);
#define TYPE_DATA_PAGE_HEADER_V2 (data_page_header_v2_get_type())
#define DATA_PAGE_HEADER_V2(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_DATA_PAGE_HEADER_V2, DataPageHeaderV2))
#define DATA_PAGE_HEADER_V2_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_DATA_PAGE_HEADER_V2, DataPageHeaderV2Class))
#define IS_DATA_PAGE_HEADER_V2(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_DATA_PAGE_HEADER_V2))
#define IS_DATA_PAGE_HEADER_V2_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_DATA_PAGE_HEADER_V2))
#define DATA_PAGE_HEADER_V2_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_DATA_PAGE_HEADER_V2, DataPageHeaderV2Class))

/* struct SplitBlockAlgorithm */
struct _SplitBlockAlgorithm
{ 
  ThriftStruct parent; 

  /* public */
};
typedef struct _SplitBlockAlgorithm SplitBlockAlgorithm;

struct _SplitBlockAlgorithmClass
{
  ThriftStructClass parent;
};
typedef struct _SplitBlockAlgorithmClass SplitBlockAlgorithmClass;

GType split_block_algorithm_get_type (void);
#define TYPE_SPLIT_BLOCK_ALGORITHM (split_block_algorithm_get_type())
#define SPLIT_BLOCK_ALGORITHM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_SPLIT_BLOCK_ALGORITHM, SplitBlockAlgorithm))
#define SPLIT_BLOCK_ALGORITHM_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_SPLIT_BLOCK_ALGORITHM, SplitBlockAlgorithmClass))
#define IS_SPLIT_BLOCK_ALGORITHM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_SPLIT_BLOCK_ALGORITHM))
#define IS_SPLIT_BLOCK_ALGORITHM_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_SPLIT_BLOCK_ALGORITHM))
#define SPLIT_BLOCK_ALGORITHM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_SPLIT_BLOCK_ALGORITHM, SplitBlockAlgorithmClass))

/* struct BloomFilterAlgorithm */
struct _BloomFilterAlgorithm
{ 
  ThriftStruct parent; 

  /* public */
  SplitBlockAlgorithm * BLOCK;
  gboolean __isset_BLOCK;
};
typedef struct _BloomFilterAlgorithm BloomFilterAlgorithm;

struct _BloomFilterAlgorithmClass
{
  ThriftStructClass parent;
};
typedef struct _BloomFilterAlgorithmClass BloomFilterAlgorithmClass;

GType bloom_filter_algorithm_get_type (void);
#define TYPE_BLOOM_FILTER_ALGORITHM (bloom_filter_algorithm_get_type())
#define BLOOM_FILTER_ALGORITHM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_BLOOM_FILTER_ALGORITHM, BloomFilterAlgorithm))
#define BLOOM_FILTER_ALGORITHM_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_BLOOM_FILTER_ALGORITHM, BloomFilterAlgorithmClass))
#define IS_BLOOM_FILTER_ALGORITHM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_BLOOM_FILTER_ALGORITHM))
#define IS_BLOOM_FILTER_ALGORITHM_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_BLOOM_FILTER_ALGORITHM))
#define BLOOM_FILTER_ALGORITHM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_BLOOM_FILTER_ALGORITHM, BloomFilterAlgorithmClass))

/* struct XxHash */
struct _XxHash
{ 
  ThriftStruct parent; 

  /* public */
};
typedef struct _XxHash XxHash;

struct _XxHashClass
{
  ThriftStructClass parent;
};
typedef struct _XxHashClass XxHashClass;

GType xx_hash_get_type (void);
#define TYPE_XX_HASH (xx_hash_get_type())
#define XX_HASH(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_XX_HASH, XxHash))
#define XX_HASH_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_XX_HASH, XxHashClass))
#define IS_XX_HASH(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_XX_HASH))
#define IS_XX_HASH_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_XX_HASH))
#define XX_HASH_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_XX_HASH, XxHashClass))

/* struct BloomFilterHash */
struct _BloomFilterHash
{ 
  ThriftStruct parent; 

  /* public */
  XxHash * XXHASH;
  gboolean __isset_XXHASH;
};
typedef struct _BloomFilterHash BloomFilterHash;

struct _BloomFilterHashClass
{
  ThriftStructClass parent;
};
typedef struct _BloomFilterHashClass BloomFilterHashClass;

GType bloom_filter_hash_get_type (void);
#define TYPE_BLOOM_FILTER_HASH (bloom_filter_hash_get_type())
#define BLOOM_FILTER_HASH(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_BLOOM_FILTER_HASH, BloomFilterHash))
#define BLOOM_FILTER_HASH_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_BLOOM_FILTER_HASH, BloomFilterHashClass))
#define IS_BLOOM_FILTER_HASH(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_BLOOM_FILTER_HASH))
#define IS_BLOOM_FILTER_HASH_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_BLOOM_FILTER_HASH))
#define BLOOM_FILTER_HASH_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_BLOOM_FILTER_HASH, BloomFilterHashClass))

/* struct Uncompressed */
struct _Uncompressed
{ 
  ThriftStruct parent; 

  /* public */
};
typedef struct _Uncompressed Uncompressed;

struct _UncompressedClass
{
  ThriftStructClass parent;
};
typedef struct _UncompressedClass UncompressedClass;

GType uncompressed_get_type (void);
#define TYPE_UNCOMPRESSED (uncompressed_get_type())
#define UNCOMPRESSED(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_UNCOMPRESSED, Uncompressed))
#define UNCOMPRESSED_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_UNCOMPRESSED, UncompressedClass))
#define IS_UNCOMPRESSED(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_UNCOMPRESSED))
#define IS_UNCOMPRESSED_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_UNCOMPRESSED))
#define UNCOMPRESSED_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_UNCOMPRESSED, UncompressedClass))

/* struct BloomFilterCompression */
struct _BloomFilterCompression
{ 
  ThriftStruct parent; 

  /* public */
  Uncompressed * UNCOMPRESSED;
  gboolean __isset_UNCOMPRESSED;
};
typedef struct _BloomFilterCompression BloomFilterCompression;

struct _BloomFilterCompressionClass
{
  ThriftStructClass parent;
};
typedef struct _BloomFilterCompressionClass BloomFilterCompressionClass;

GType bloom_filter_compression_get_type (void);
#define TYPE_BLOOM_FILTER_COMPRESSION (bloom_filter_compression_get_type())
#define BLOOM_FILTER_COMPRESSION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_BLOOM_FILTER_COMPRESSION, BloomFilterCompression))
#define BLOOM_FILTER_COMPRESSION_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_BLOOM_FILTER_COMPRESSION, BloomFilterCompressionClass))
#define IS_BLOOM_FILTER_COMPRESSION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_BLOOM_FILTER_COMPRESSION))
#define IS_BLOOM_FILTER_COMPRESSION_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_BLOOM_FILTER_COMPRESSION))
#define BLOOM_FILTER_COMPRESSION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_BLOOM_FILTER_COMPRESSION, BloomFilterCompressionClass))

/* struct BloomFilterHeader */
struct _BloomFilterHeader
{ 
  ThriftStruct parent; 

  /* public */
  gint32 numBytes;
  BloomFilterAlgorithm * algorithm;
  BloomFilterHash * hash;
  BloomFilterCompression * compression;
};
typedef struct _BloomFilterHeader BloomFilterHeader;

struct _BloomFilterHeaderClass
{
  ThriftStructClass parent;
};
typedef struct _BloomFilterHeaderClass BloomFilterHeaderClass;

GType bloom_filter_header_get_type (void);
#define TYPE_BLOOM_FILTER_HEADER (bloom_filter_header_get_type())
#define BLOOM_FILTER_HEADER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_BLOOM_FILTER_HEADER, BloomFilterHeader))
#define BLOOM_FILTER_HEADER_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_BLOOM_FILTER_HEADER, BloomFilterHeaderClass))
#define IS_BLOOM_FILTER_HEADER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_BLOOM_FILTER_HEADER))
#define IS_BLOOM_FILTER_HEADER_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_BLOOM_FILTER_HEADER))
#define BLOOM_FILTER_HEADER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_BLOOM_FILTER_HEADER, BloomFilterHeaderClass))

/* struct PageHeader */
struct _PageHeader
{ 
  ThriftStruct parent; 

  /* public */
  PageType type;
  gint32 uncompressed_page_size;
  gint32 compressed_page_size;
  gint32 crc;
  gboolean __isset_crc;
  DataPageHeader * data_page_header;
  gboolean __isset_data_page_header;
  IndexPageHeader * index_page_header;
  gboolean __isset_index_page_header;
  DictionaryPageHeader * dictionary_page_header;
  gboolean __isset_dictionary_page_header;
  DataPageHeaderV2 * data_page_header_v2;
  gboolean __isset_data_page_header_v2;
};
typedef struct _PageHeader PageHeader;

struct _PageHeaderClass
{
  ThriftStructClass parent;
};
typedef struct _PageHeaderClass PageHeaderClass;

GType page_header_get_type (void);
#define TYPE_PAGE_HEADER (page_header_get_type())
#define PAGE_HEADER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_PAGE_HEADER, PageHeader))
#define PAGE_HEADER_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_PAGE_HEADER, PageHeaderClass))
#define IS_PAGE_HEADER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_PAGE_HEADER))
#define IS_PAGE_HEADER_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_PAGE_HEADER))
#define PAGE_HEADER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_PAGE_HEADER, PageHeaderClass))

/* struct KeyValue */
struct _KeyValue
{ 
  ThriftStruct parent; 

  /* public */
  gchar * key;
  gchar * value;
  gboolean __isset_value;
};
typedef struct _KeyValue KeyValue;

struct _KeyValueClass
{
  ThriftStructClass parent;
};
typedef struct _KeyValueClass KeyValueClass;

GType key_value_get_type (void);
#define TYPE_KEY_VALUE (key_value_get_type())
#define KEY_VALUE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_KEY_VALUE, KeyValue))
#define KEY_VALUE_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_KEY_VALUE, KeyValueClass))
#define IS_KEY_VALUE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_KEY_VALUE))
#define IS_KEY_VALUE_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_KEY_VALUE))
#define KEY_VALUE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_KEY_VALUE, KeyValueClass))

/* struct SortingColumn */
struct _SortingColumn
{ 
  ThriftStruct parent; 

  /* public */
  gint32 column_idx;
  gboolean descending;
  gboolean nulls_first;
};
typedef struct _SortingColumn SortingColumn;

struct _SortingColumnClass
{
  ThriftStructClass parent;
};
typedef struct _SortingColumnClass SortingColumnClass;

GType sorting_column_get_type (void);
#define TYPE_SORTING_COLUMN (sorting_column_get_type())
#define SORTING_COLUMN(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_SORTING_COLUMN, SortingColumn))
#define SORTING_COLUMN_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_SORTING_COLUMN, SortingColumnClass))
#define IS_SORTING_COLUMN(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_SORTING_COLUMN))
#define IS_SORTING_COLUMN_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_SORTING_COLUMN))
#define SORTING_COLUMN_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_SORTING_COLUMN, SortingColumnClass))

/* struct PageEncodingStats */
struct _PageEncodingStats
{ 
  ThriftStruct parent; 

  /* public */
  PageType page_type;
  Encoding encoding;
  gint32 count;
};
typedef struct _PageEncodingStats PageEncodingStats;

struct _PageEncodingStatsClass
{
  ThriftStructClass parent;
};
typedef struct _PageEncodingStatsClass PageEncodingStatsClass;

GType page_encoding_stats_get_type (void);
#define TYPE_PAGE_ENCODING_STATS (page_encoding_stats_get_type())
#define PAGE_ENCODING_STATS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_PAGE_ENCODING_STATS, PageEncodingStats))
#define PAGE_ENCODING_STATS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_PAGE_ENCODING_STATS, PageEncodingStatsClass))
#define IS_PAGE_ENCODING_STATS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_PAGE_ENCODING_STATS))
#define IS_PAGE_ENCODING_STATS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_PAGE_ENCODING_STATS))
#define PAGE_ENCODING_STATS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_PAGE_ENCODING_STATS, PageEncodingStatsClass))

/* struct ColumnMetaData */
struct _ColumnMetaData
{ 
  ThriftStruct parent; 

  /* public */
  Type type;
  GArray * encodings;
  GPtrArray * path_in_schema;
  CompressionCodec codec;
  gint64 num_values;
  gint64 total_uncompressed_size;
  gint64 total_compressed_size;
  GPtrArray * key_value_metadata;
  gboolean __isset_key_value_metadata;
  gint64 data_page_offset;
  gint64 index_page_offset;
  gboolean __isset_index_page_offset;
  gint64 dictionary_page_offset;
  gboolean __isset_dictionary_page_offset;
  Statistics * statistics;
  gboolean __isset_statistics;
  GPtrArray * encoding_stats;
  gboolean __isset_encoding_stats;
  gint64 bloom_filter_offset;
  gboolean __isset_bloom_filter_offset;
  gint32 bloom_filter_length;
  gboolean __isset_bloom_filter_length;
  SizeStatistics * size_statistics;
  gboolean __isset_size_statistics;
  GeospatialStatistics * geospatial_statistics;
  gboolean __isset_geospatial_statistics;
};
typedef struct _ColumnMetaData ColumnMetaData;

struct _ColumnMetaDataClass
{
  ThriftStructClass parent;
};
typedef struct _ColumnMetaDataClass ColumnMetaDataClass;

GType column_meta_data_get_type (void);
#define TYPE_COLUMN_META_DATA (column_meta_data_get_type())
#define COLUMN_META_DATA(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_COLUMN_META_DATA, ColumnMetaData))
#define COLUMN_META_DATA_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_COLUMN_META_DATA, ColumnMetaDataClass))
#define IS_COLUMN_META_DATA(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_COLUMN_META_DATA))
#define IS_COLUMN_META_DATA_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_COLUMN_META_DATA))
#define COLUMN_META_DATA_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_COLUMN_META_DATA, ColumnMetaDataClass))

/* struct EncryptionWithFooterKey */
struct _EncryptionWithFooterKey
{ 
  ThriftStruct parent; 

  /* public */
};
typedef struct _EncryptionWithFooterKey EncryptionWithFooterKey;

struct _EncryptionWithFooterKeyClass
{
  ThriftStructClass parent;
};
typedef struct _EncryptionWithFooterKeyClass EncryptionWithFooterKeyClass;

GType encryption_with_footer_key_get_type (void);
#define TYPE_ENCRYPTION_WITH_FOOTER_KEY (encryption_with_footer_key_get_type())
#define ENCRYPTION_WITH_FOOTER_KEY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_ENCRYPTION_WITH_FOOTER_KEY, EncryptionWithFooterKey))
#define ENCRYPTION_WITH_FOOTER_KEY_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_ENCRYPTION_WITH_FOOTER_KEY, EncryptionWithFooterKeyClass))
#define IS_ENCRYPTION_WITH_FOOTER_KEY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_ENCRYPTION_WITH_FOOTER_KEY))
#define IS_ENCRYPTION_WITH_FOOTER_KEY_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_ENCRYPTION_WITH_FOOTER_KEY))
#define ENCRYPTION_WITH_FOOTER_KEY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_ENCRYPTION_WITH_FOOTER_KEY, EncryptionWithFooterKeyClass))

/* struct EncryptionWithColumnKey */
struct _EncryptionWithColumnKey
{ 
  ThriftStruct parent; 

  /* public */
  GPtrArray * path_in_schema;
  GByteArray * key_metadata;
  gboolean __isset_key_metadata;
};
typedef struct _EncryptionWithColumnKey EncryptionWithColumnKey;

struct _EncryptionWithColumnKeyClass
{
  ThriftStructClass parent;
};
typedef struct _EncryptionWithColumnKeyClass EncryptionWithColumnKeyClass;

GType encryption_with_column_key_get_type (void);
#define TYPE_ENCRYPTION_WITH_COLUMN_KEY (encryption_with_column_key_get_type())
#define ENCRYPTION_WITH_COLUMN_KEY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_ENCRYPTION_WITH_COLUMN_KEY, EncryptionWithColumnKey))
#define ENCRYPTION_WITH_COLUMN_KEY_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_ENCRYPTION_WITH_COLUMN_KEY, EncryptionWithColumnKeyClass))
#define IS_ENCRYPTION_WITH_COLUMN_KEY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_ENCRYPTION_WITH_COLUMN_KEY))
#define IS_ENCRYPTION_WITH_COLUMN_KEY_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_ENCRYPTION_WITH_COLUMN_KEY))
#define ENCRYPTION_WITH_COLUMN_KEY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_ENCRYPTION_WITH_COLUMN_KEY, EncryptionWithColumnKeyClass))

/* struct ColumnCryptoMetaData */
struct _ColumnCryptoMetaData
{ 
  ThriftStruct parent; 

  /* public */
  EncryptionWithFooterKey * ENCRYPTION_WITH_FOOTER_KEY;
  gboolean __isset_ENCRYPTION_WITH_FOOTER_KEY;
  EncryptionWithColumnKey * ENCRYPTION_WITH_COLUMN_KEY;
  gboolean __isset_ENCRYPTION_WITH_COLUMN_KEY;
};
typedef struct _ColumnCryptoMetaData ColumnCryptoMetaData;

struct _ColumnCryptoMetaDataClass
{
  ThriftStructClass parent;
};
typedef struct _ColumnCryptoMetaDataClass ColumnCryptoMetaDataClass;

GType column_crypto_meta_data_get_type (void);
#define TYPE_COLUMN_CRYPTO_META_DATA (column_crypto_meta_data_get_type())
#define COLUMN_CRYPTO_META_DATA(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_COLUMN_CRYPTO_META_DATA, ColumnCryptoMetaData))
#define COLUMN_CRYPTO_META_DATA_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_COLUMN_CRYPTO_META_DATA, ColumnCryptoMetaDataClass))
#define IS_COLUMN_CRYPTO_META_DATA(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_COLUMN_CRYPTO_META_DATA))
#define IS_COLUMN_CRYPTO_META_DATA_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_COLUMN_CRYPTO_META_DATA))
#define COLUMN_CRYPTO_META_DATA_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_COLUMN_CRYPTO_META_DATA, ColumnCryptoMetaDataClass))

/* struct ColumnChunk */
struct _ColumnChunk
{ 
  ThriftStruct parent; 

  /* public */
  gchar * file_path;
  gboolean __isset_file_path;
  gint64 file_offset;
  ColumnMetaData * meta_data;
  gboolean __isset_meta_data;
  gint64 offset_index_offset;
  gboolean __isset_offset_index_offset;
  gint32 offset_index_length;
  gboolean __isset_offset_index_length;
  gint64 column_index_offset;
  gboolean __isset_column_index_offset;
  gint32 column_index_length;
  gboolean __isset_column_index_length;
  ColumnCryptoMetaData * crypto_metadata;
  gboolean __isset_crypto_metadata;
  GByteArray * encrypted_column_metadata;
  gboolean __isset_encrypted_column_metadata;
};
typedef struct _ColumnChunk ColumnChunk;

struct _ColumnChunkClass
{
  ThriftStructClass parent;
};
typedef struct _ColumnChunkClass ColumnChunkClass;

GType column_chunk_get_type (void);
#define TYPE_COLUMN_CHUNK (column_chunk_get_type())
#define COLUMN_CHUNK(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_COLUMN_CHUNK, ColumnChunk))
#define COLUMN_CHUNK_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_COLUMN_CHUNK, ColumnChunkClass))
#define IS_COLUMN_CHUNK(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_COLUMN_CHUNK))
#define IS_COLUMN_CHUNK_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_COLUMN_CHUNK))
#define COLUMN_CHUNK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_COLUMN_CHUNK, ColumnChunkClass))

/* struct RowGroup */
struct _RowGroup
{ 
  ThriftStruct parent; 

  /* public */
  GPtrArray * columns;
  gint64 total_byte_size;
  gint64 num_rows;
  GPtrArray * sorting_columns;
  gboolean __isset_sorting_columns;
  gint64 file_offset;
  gboolean __isset_file_offset;
  gint64 total_compressed_size;
  gboolean __isset_total_compressed_size;
  gint16 ordinal;
  gboolean __isset_ordinal;
};
typedef struct _RowGroup RowGroup;

struct _RowGroupClass
{
  ThriftStructClass parent;
};
typedef struct _RowGroupClass RowGroupClass;

GType row_group_get_type (void);
#define TYPE_ROW_GROUP (row_group_get_type())
#define ROW_GROUP(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_ROW_GROUP, RowGroup))
#define ROW_GROUP_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_ROW_GROUP, RowGroupClass))
#define IS_ROW_GROUP(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_ROW_GROUP))
#define IS_ROW_GROUP_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_ROW_GROUP))
#define ROW_GROUP_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_ROW_GROUP, RowGroupClass))

/* struct TypeDefinedOrder */
struct _TypeDefinedOrder
{ 
  ThriftStruct parent; 

  /* public */
};
typedef struct _TypeDefinedOrder TypeDefinedOrder;

struct _TypeDefinedOrderClass
{
  ThriftStructClass parent;
};
typedef struct _TypeDefinedOrderClass TypeDefinedOrderClass;

GType type_defined_order_get_type (void);
#define TYPE_TYPE_DEFINED_ORDER (type_defined_order_get_type())
#define TYPE_DEFINED_ORDER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_TYPE_DEFINED_ORDER, TypeDefinedOrder))
#define TYPE_DEFINED_ORDER_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_TYPE_DEFINED_ORDER, TypeDefinedOrderClass))
#define IS_TYPE_DEFINED_ORDER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_TYPE_DEFINED_ORDER))
#define IS_TYPE_DEFINED_ORDER_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_TYPE_DEFINED_ORDER))
#define TYPE_DEFINED_ORDER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_TYPE_DEFINED_ORDER, TypeDefinedOrderClass))

/* struct ColumnOrder */
struct _ColumnOrder
{ 
  ThriftStruct parent; 

  /* public */
  TypeDefinedOrder * TYPE_ORDER;
  gboolean __isset_TYPE_ORDER;
};
typedef struct _ColumnOrder ColumnOrder;

struct _ColumnOrderClass
{
  ThriftStructClass parent;
};
typedef struct _ColumnOrderClass ColumnOrderClass;

GType column_order_get_type (void);
#define TYPE_COLUMN_ORDER (column_order_get_type())
#define COLUMN_ORDER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_COLUMN_ORDER, ColumnOrder))
#define COLUMN_ORDER_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_COLUMN_ORDER, ColumnOrderClass))
#define IS_COLUMN_ORDER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_COLUMN_ORDER))
#define IS_COLUMN_ORDER_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_COLUMN_ORDER))
#define COLUMN_ORDER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_COLUMN_ORDER, ColumnOrderClass))

/* struct PageLocation */
struct _PageLocation
{ 
  ThriftStruct parent; 

  /* public */
  gint64 offset;
  gint32 compressed_page_size;
  gint64 first_row_index;
};
typedef struct _PageLocation PageLocation;

struct _PageLocationClass
{
  ThriftStructClass parent;
};
typedef struct _PageLocationClass PageLocationClass;

GType page_location_get_type (void);
#define TYPE_PAGE_LOCATION (page_location_get_type())
#define PAGE_LOCATION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_PAGE_LOCATION, PageLocation))
#define PAGE_LOCATION_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_PAGE_LOCATION, PageLocationClass))
#define IS_PAGE_LOCATION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_PAGE_LOCATION))
#define IS_PAGE_LOCATION_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_PAGE_LOCATION))
#define PAGE_LOCATION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_PAGE_LOCATION, PageLocationClass))

/* struct OffsetIndex */
struct _OffsetIndex
{ 
  ThriftStruct parent; 

  /* public */
  GPtrArray * page_locations;
  GArray * unencoded_byte_array_data_bytes;
  gboolean __isset_unencoded_byte_array_data_bytes;
};
typedef struct _OffsetIndex OffsetIndex;

struct _OffsetIndexClass
{
  ThriftStructClass parent;
};
typedef struct _OffsetIndexClass OffsetIndexClass;

GType offset_index_get_type (void);
#define TYPE_OFFSET_INDEX (offset_index_get_type())
#define OFFSET_INDEX(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_OFFSET_INDEX, OffsetIndex))
#define OFFSET_INDEX_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_OFFSET_INDEX, OffsetIndexClass))
#define IS_OFFSET_INDEX(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_OFFSET_INDEX))
#define IS_OFFSET_INDEX_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_OFFSET_INDEX))
#define OFFSET_INDEX_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_OFFSET_INDEX, OffsetIndexClass))

/* struct ColumnIndex */
struct _ColumnIndex
{ 
  ThriftStruct parent; 

  /* public */
  GArray * null_pages;
  GPtrArray * min_values;
  GPtrArray * max_values;
  BoundaryOrder boundary_order;
  GArray * null_counts;
  gboolean __isset_null_counts;
  GArray * repetition_level_histograms;
  gboolean __isset_repetition_level_histograms;
  GArray * definition_level_histograms;
  gboolean __isset_definition_level_histograms;
};
typedef struct _ColumnIndex ColumnIndex;

struct _ColumnIndexClass
{
  ThriftStructClass parent;
};
typedef struct _ColumnIndexClass ColumnIndexClass;

GType column_index_get_type (void);
#define TYPE_COLUMN_INDEX (column_index_get_type())
#define COLUMN_INDEX(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_COLUMN_INDEX, ColumnIndex))
#define COLUMN_INDEX_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_COLUMN_INDEX, ColumnIndexClass))
#define IS_COLUMN_INDEX(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_COLUMN_INDEX))
#define IS_COLUMN_INDEX_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_COLUMN_INDEX))
#define COLUMN_INDEX_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_COLUMN_INDEX, ColumnIndexClass))

/* struct AesGcmV1 */
struct _AesGcmV1
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * aad_prefix;
  gboolean __isset_aad_prefix;
  GByteArray * aad_file_unique;
  gboolean __isset_aad_file_unique;
  gboolean supply_aad_prefix;
  gboolean __isset_supply_aad_prefix;
};
typedef struct _AesGcmV1 AesGcmV1;

struct _AesGcmV1Class
{
  ThriftStructClass parent;
};
typedef struct _AesGcmV1Class AesGcmV1Class;

GType aes_gcm_v1_get_type (void);
#define TYPE_AES_GCM_V1 (aes_gcm_v1_get_type())
#define AES_GCM_V1(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_AES_GCM_V1, AesGcmV1))
#define AES_GCM_V1_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_AES_GCM_V1, AesGcmV1Class))
#define IS_AES_GCM_V1(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_AES_GCM_V1))
#define IS_AES_GCM_V1_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_AES_GCM_V1))
#define AES_GCM_V1_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_AES_GCM_V1, AesGcmV1Class))

/* struct AesGcmCtrV1 */
struct _AesGcmCtrV1
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * aad_prefix;
  gboolean __isset_aad_prefix;
  GByteArray * aad_file_unique;
  gboolean __isset_aad_file_unique;
  gboolean supply_aad_prefix;
  gboolean __isset_supply_aad_prefix;
};
typedef struct _AesGcmCtrV1 AesGcmCtrV1;

struct _AesGcmCtrV1Class
{
  ThriftStructClass parent;
};
typedef struct _AesGcmCtrV1Class AesGcmCtrV1Class;

GType aes_gcm_ctr_v1_get_type (void);
#define TYPE_AES_GCM_CTR_V1 (aes_gcm_ctr_v1_get_type())
#define AES_GCM_CTR_V1(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_AES_GCM_CTR_V1, AesGcmCtrV1))
#define AES_GCM_CTR_V1_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_AES_GCM_CTR_V1, AesGcmCtrV1Class))
#define IS_AES_GCM_CTR_V1(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_AES_GCM_CTR_V1))
#define IS_AES_GCM_CTR_V1_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_AES_GCM_CTR_V1))
#define AES_GCM_CTR_V1_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_AES_GCM_CTR_V1, AesGcmCtrV1Class))

/* struct EncryptionAlgorithm */
struct _EncryptionAlgorithm
{ 
  ThriftStruct parent; 

  /* public */
  AesGcmV1 * AES_GCM_V1;
  gboolean __isset_AES_GCM_V1;
  AesGcmCtrV1 * AES_GCM_CTR_V1;
  gboolean __isset_AES_GCM_CTR_V1;
};
typedef struct _EncryptionAlgorithm EncryptionAlgorithm;

struct _EncryptionAlgorithmClass
{
  ThriftStructClass parent;
};
typedef struct _EncryptionAlgorithmClass EncryptionAlgorithmClass;

GType encryption_algorithm_get_type (void);
#define TYPE_ENCRYPTION_ALGORITHM (encryption_algorithm_get_type())
#define ENCRYPTION_ALGORITHM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_ENCRYPTION_ALGORITHM, EncryptionAlgorithm))
#define ENCRYPTION_ALGORITHM_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_ENCRYPTION_ALGORITHM, EncryptionAlgorithmClass))
#define IS_ENCRYPTION_ALGORITHM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_ENCRYPTION_ALGORITHM))
#define IS_ENCRYPTION_ALGORITHM_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_ENCRYPTION_ALGORITHM))
#define ENCRYPTION_ALGORITHM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_ENCRYPTION_ALGORITHM, EncryptionAlgorithmClass))

/* struct FileMetaData */
struct _FileMetaData
{ 
  ThriftStruct parent; 

  /* public */
  gint32 version;
  GPtrArray * schema;
  gint64 num_rows;
  GPtrArray * row_groups;
  GPtrArray * key_value_metadata;
  gboolean __isset_key_value_metadata;
  gchar * created_by;
  gboolean __isset_created_by;
  GPtrArray * column_orders;
  gboolean __isset_column_orders;
  EncryptionAlgorithm * encryption_algorithm;
  gboolean __isset_encryption_algorithm;
  GByteArray * footer_signing_key_metadata;
  gboolean __isset_footer_signing_key_metadata;
};
typedef struct _FileMetaData FileMetaData;

struct _FileMetaDataClass
{
  ThriftStructClass parent;
};
typedef struct _FileMetaDataClass FileMetaDataClass;

GType file_meta_data_get_type (void);
#define TYPE_FILE_META_DATA (file_meta_data_get_type())
#define FILE_META_DATA(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_FILE_META_DATA, FileMetaData))
#define FILE_META_DATA_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_FILE_META_DATA, FileMetaDataClass))
#define IS_FILE_META_DATA(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_FILE_META_DATA))
#define IS_FILE_META_DATA_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_FILE_META_DATA))
#define FILE_META_DATA_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_FILE_META_DATA, FileMetaDataClass))

/* struct FileCryptoMetaData */
struct _FileCryptoMetaData
{ 
  ThriftStruct parent; 

  /* public */
  EncryptionAlgorithm * encryption_algorithm;
  GByteArray * key_metadata;
  gboolean __isset_key_metadata;
};
typedef struct _FileCryptoMetaData FileCryptoMetaData;

struct _FileCryptoMetaDataClass
{
  ThriftStructClass parent;
};
typedef struct _FileCryptoMetaDataClass FileCryptoMetaDataClass;

GType file_crypto_meta_data_get_type (void);
#define TYPE_FILE_CRYPTO_META_DATA (file_crypto_meta_data_get_type())
#define FILE_CRYPTO_META_DATA(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_FILE_CRYPTO_META_DATA, FileCryptoMetaData))
#define FILE_CRYPTO_META_DATA_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_FILE_CRYPTO_META_DATA, FileCryptoMetaDataClass))
#define IS_FILE_CRYPTO_META_DATA(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_FILE_CRYPTO_META_DATA))
#define IS_FILE_CRYPTO_META_DATA_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_FILE_CRYPTO_META_DATA))
#define FILE_CRYPTO_META_DATA_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_FILE_CRYPTO_META_DATA, FileCryptoMetaDataClass))

/* constants */

#endif /* PARQUET_TYPES_H */
