 $start /= COSE_Messages
 $start /= Internal_Types
; / COSE_Key / COSE_KeySet
;  / Internal_Types

Internal_Types = Sig_structure ; / Enc_structure / MAC_structure

label = int / tstr
values = any

COSE_Messages = COSE_Untagged_Message / COSE_Tagged_Message

COSE_Untagged_Message = COSE_Sign / COSE_Sign1 ; /
;    COSE_Encrypt / COSE_Encrypt0 /
;    COSE_Mac / COSE_Mac0

COSE_Tagged_Message = COSE_Sign_Tagged / COSE_Sign1_Tagged ; /
;    COSE_Encrypt_Tagged / COSE_Encrypt0_Tagged /
;    COSE_Mac_Tagged / COSE_Mac0_Tagged

Headers = (
    protected : empty_or_serialized_map,
    unprotected : header_map
)

header_map = {
   Generic_Headers,
    * label => values
}

; Here I am using an everparse-specific construct to handle only the
; deterministic CBOR subset. While RFC 9052 Section 9 says that COSE
; requires the Deterministic CBOR restrictions of RFC 8949 Section
; 4.2.1, that does not appear in the .cbor construct of the CDDL
; specification.
empty_or_serialized_map = bstr .everparse-det-cbor header_map / bstr .size 0

; Also, I introduced a CDDL constant type, `everparse-no-match`, to
; model empty types. This is sufficient to model the fact that keys 5
; and 6 shall not appear together

Generic_Headers = (
  ? 1 => int / tstr,  ; algorithm identifier
  ? 2 => [+label],    ; criticality
  ? 3 => tstr / int,  ; content type
  ? 4 => bstr,        ; key identifier
  ((5 => bstr, ? 6 : everparse-no-match) // (6 => bstr, ? 5 : everparse-no-match) // (? 6 : everparse-no-match, ? 5 : everparse-no-match)) ; this expresses the constraint that 5 and 6 must not appear together, but they are allowed to not appear at all; in all cases, 5 and 6 must mot match any further entry beyond Generic_Headers, as enforced by the cuts.
)

COSE_Sign_Tagged = #6.98(COSE_Sign)

COSE_Sign = [
    Headers,
    payload : bstr / nil,
    signatures : [+ COSE_Signature]
]

COSE_Signature =  [
    Headers,
    signature : bstr
]

COSE_Sign1_Tagged = #6.18(COSE_Sign1)

COSE_Sign1 = [
    Headers,
    payload : bstr / nil,
    signature : bstr
]

; FIXME: This CDDL specification is buggy with the greedy semantics
; for `?`: even if `sign_protected` is not required, `external_aad`
; will require a bstr, which will be caught by `?sign_protected`.

; Sig_structure = [
;     context : "Signature" / "Signature1",
;     body_protected : empty_or_serialized_map,
;     ? sign_protected : empty_or_serialized_map,
;     external_aad : bstr,
;     payload : bstr
; ]

; To circumvent this bug, we need to rewrite the specification as
; follows:

Sig_structure = [
    context : "Signature" / "Signature1",
    body_protected : empty_or_serialized_map,
    (
        sign_protected : empty_or_serialized_map,
        external_aad : bstr,
        payload : bstr
     //
        external_aad : bstr,
        payload : bstr
    )
]

COSE_Key = COSE_Key_OKP ;/ COSE_KEY_Generic

COSE_Key_OKP = {
    1: 1,                ; kty
    -1: int / tstr,      ; crv: EC identifier - Taken from the "COSE Elliptic Curves" registry
    ? -2: bstr,          ; x: x-coordinate
    ? -4: bstr,          ; d: private key
    * label => values
}

;COSE_Key_Generic = {
;    1 => tstr / int,          ; kty
;    ? 2 => bstr,              ; kid
;    ? 3 => tstr / int,        ; alg
;    ? 4 => [+ (tstr / int) ], ; key_ops
;    ? 5 => bstr,              ; Base IV
;    * label => values
;}
