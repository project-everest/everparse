label = int / tstr
values = any

Headers = (
    protected : empty_or_serialized_map,
    unprotected : header_map
)

header_map = {
   Generic_Headers,
    * label => values
}

; Here I am using an everparse-specific construct to handle only the
; deterministic CBOR subset. While RFC 9052 Section 9 says that COSE
; requires the Deterministic CBOR restrictions of RFC 8949 Section
; 4.2.1, that does not appear in the .cbor construct of the CDDL
; specification.
empty_or_serialized_map = bstr .everparse-det-cbor header_map / bstr .size 0

; Also, I introduced a CDDL constant type, `everparse-no-match`, to
; model empty types. This is sufficient to model the fact that keys 5
; and 6 shall not appear together

Generic_Headers = (
  ? 1 => int / tstr,  ; algorithm identifier
  ? 2 => [+label],    ; criticality
  ? 3 => tstr / int,  ; content type
  ? 4 => bstr,        ; key identifier
  ((5 => bstr, ? 6 : everparse-no-match) // (6 => bstr, ? 5 : everparse-no-match) // (? 6 : everparse-no-match, ? 5 : everparse-no-match)) ; this expresses the constraint that 5 and 6 must not appear together, but they are allowed to not appear at all; in all cases, 5 and 6 must mot match any further entry beyond Generic_Headers, as enforced by the cuts.
)

  Enc_structure = [
       context : "Encrypt" / "Encrypt0" / "Enc_Recipient" /
           "Mac_Recipient" / "Rec_Recipient",
       protected : empty_or_serialized_map,
       external_aad : bstr
   ]

  COSE_Encrypt_Tagged = #6.96(COSE_Encrypt)

  COSE_Encrypt = [
       Headers,
       ciphertext : bstr / nil,
       recipients : [+COSE_recipient]
   ]

; FIXME: in RFC 9052, COSE_recipient is recursive, but Appendix B says
; that 3 layers are enough. Let's do that.

COSE_recipient = [
       Headers,
       ciphertext : bstr / nil,
       ? recipients : [+COSE_recipient0]
   ]

COSE_recipient0 = [
       Headers,
       ciphertext : bstr / nil,
       ? recipients : [+COSE_recipient1]
   ]

COSE_recipient1 = [
       Headers,
       ciphertext : bstr / nil,
       ? recipients : [+COSE_recipient2]
   ]

COSE_recipient2 = [
       Headers,
       ciphertext : bstr / nil,
       ? recipients : [+COSE_recipient3]
   ]

COSE_recipient3 = [
       Headers,
       ciphertext : bstr / nil
   ]

   COSE_Encrypt0_Tagged = #6.16(COSE_Encrypt0)

   COSE_Encrypt0 = [
       Headers,
       ciphertext : bstr / nil,
   ]
