name: Upgrade hashes, 3D doc, CBOR, COSE snapshots
on:
  workflow_dispatch:
  schedule:
    - cron: "0 22 * * 0,3"

defaults:
  run:
    shell: bash

permissions:
  contents: write
  pull-requests: write

jobs:
  advance-hashes:
    runs-on: Ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0
      - name: Set up git
        run: |
          git config --global user.name "Dzomo, the Everest Yak"
          git config --global user.email "24394600+dzomo@users.noreply.github.com"
      - name: Install opam
        run: |
          sudo apt-get update && sudo apt-get install --yes --no-install-recommends opam
      - name: Advance hashes
        run: |
          make -C opt -j$(nproc) advance &&
          if ! git diff --exit-code -- opt/hashes.Makefile ; then git add -u opt/hashes.Makefile && git commit -m 'Update hashes' ; fi &&
          git diff --exit-code
      # - name: Generate snapshot
      #   run: |
      #     make ADMIT=1 cbor-snapshot 3d-doc-snapshot -kj$(nproc) && make ADMIT=1 cose-snapshot -kj$(nproc) &&
      #     git add doc/3d-snapshot src/cbor/pulse/det/c src/cbor/pulse/det/rust src/cose/c src/cose/rust &&
      #     if ! git diff --staged --exit-code ; then git commit -m "3D doc, CBOR, COSE snapshot" ; fi &&
      #     git diff --exit-code
      - name: Push new branch
        run: |
          git checkout -b _dzomo_upgrade_${{ github.run_id }} &&
          git push origin _dzomo_upgrade_${{ github.run_id }} &&
          git rev-parse HEAD > hash.txt
      - name: Upload hash
        uses: actions/upload-artifact@v4
        with:
          path: |
            hash.txt
          name: hash

  # build-macos:
  #   runs-on: macos-latest
  #   needs: advance-hashes
  #   steps:
  #     - name: Download hash
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: hash
  #     - name: Read hash
  #       run: |
  #         hash="$(cat hash.txt)"
  #         echo "hash=$hash" >> $GITHUB_ENV
  #     - uses: actions/checkout@master
  #       with:
  #         submodules: true
  #         ref: ${{ env.hash }}
  #     - uses: ocaml/setup-ocaml@v3
  #       with:
  #         ocaml-compiler: 4.14.2
  #     - name: Install Homebrew tools
  #       run: |
  #         brew install bash gnu-getopt make gnu-time coreutils
  #     - name: Build package
  #       run: |
  #         eval $(opam env)
  #         env OPAMNODEPEXTS=0 make -f package.Makefile package -kj$(sysctl -n hw.logicalcpu)
  #     - uses: actions/upload-artifact@v4
  #       with:
  #         path: |
  #           everparse_*.tar.gz
  #         name: everparse-build-macos

  # test-macos:
  #   needs: build-macos
  #   runs-on: macos-latest
  #   steps:
  #     - name: Download artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: everparse-build-macos
  #         path: test0
  #     - name: Extract artifact
  #       run: |
  #         pushd test0 &&
  #         tar xzf everparse_*.tar.gz &&
  #         popd &&
  #         mv test0/everparse test
  #     - name: Check out repo
  #       uses: actions/checkout@v4
  #       with:
  #         sparse-checkout: |
  #           src/3d/tests
  #           src/cddl/tests/demo/test.cddl
  #         path: ${{ github.workspace }}/everparse
  #     - name: Test EverParse
  #       run: |
  #         bash ${{ github.workspace }}/test/everparse.sh ${{ github.workspace }}/everparse/src/3d/tests/Arithmetic.3d ${{ github.workspace }}/everparse/src/3d/tests/FieldDependence0.3d && cd ${{ github.workspace }}/everparse/src/3d/tests/ && bash ${{ github.workspace }}/test/everparse.sh Comments.3d && bash ${{ github.workspace }}/test/everparse.sh --check_hashes inplace Comments.3d
  #     - name: Test EverParse test case generation
  #       run: |
  #         bash ${{ github.workspace }}/test/everparse.sh ${{ github.workspace }}/everparse/src/3d/tests/ELFTestGen.3d --odir ${{ github.workspace }}/test-elf --z3_test ELFTestGen._ELFTestGen --z3_witnesses 10 --z3_branch_depth 5
  #     - name: Test EverCDDL
  #       run: |
  #         ${{ github.workspace }}/test/bin/cddl.exe ${{ github.workspace }}/everparse/src/cddl/tests/demo/test.cddl
  #     - name: Upload test artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         path: everparse/src/3d/tests/Comments*
  #         name: everparse-test-macos

  # build-linux:
  #   runs-on: Ubuntu-22.04
  #   needs: advance-hashes
  #   steps:
  #     - name: Download hash
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: hash
  #     - name: Read hash
  #       run: |
  #         hash="$(cat hash.txt)"
  #         echo "hash=$hash" >> $GITHUB_ENV
  #     - uses: actions/checkout@master
  #       with:
  #         submodules: true
  #         ref: ${{ env.hash }}
  #     - uses: ocaml/setup-ocaml@v3
  #       with:
  #         ocaml-compiler: 4.14.2
  #     - name: Build package
  #       run: |
  #         eval $(opam env)
  #         env OPAMNODEPEXTS=0 make -f package.Makefile package -kj$(nproc)
  #     - uses: actions/upload-artifact@v4
  #       with:
  #         path: |
  #           everparse_*.tar.gz
  #         name: everparse-build-linux

  # test-linux:
  #   needs: build-linux
  #   runs-on: ubuntu-22.04
  #   steps:
  #     - name: Download artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: everparse-build-linux
  #         path: test0
  #     - name: Extract artifact
  #       run: |
  #         pushd test0
  #         tar xzf everparse_*.tar.gz
  #         popd
  #         mv test0/everparse test
  #     - name: Check out repo
  #       uses: actions/checkout@v4
  #       with:
  #         sparse-checkout: |
  #           src/3d/tests
  #           src/cddl/tests/demo/test.cddl
  #         path: ${{ github.workspace }}/everparse
  #     - name: Test EverParse
  #       run: |
  #         bash ${{ github.workspace }}/test/everparse.sh ${{ github.workspace }}/everparse/src/3d/tests/Arithmetic.3d ${{ github.workspace }}/everparse/src/3d/tests/FieldDependence0.3d && cd ${{ github.workspace }}/everparse/src/3d/tests/ && bash ${{ github.workspace }}/test/everparse.sh Comments.3d && bash ${{ github.workspace }}/test/everparse.sh --check_hashes inplace Comments.3d
  #     - name: Test EverParse test case generation
  #       run: |
  #         bash ${{ github.workspace }}/test/everparse.sh ${{ github.workspace }}/everparse/src/3d/tests/ELFTestGen.3d --odir ${{ github.workspace }}/test-elf --z3_test ELFTestGen._ELFTestGen --z3_witnesses 10 --z3_branch_depth 5
  #     - name: Test EverCDDL
  #       run: |
  #         ${{ github.workspace }}/test/bin/cddl.exe ${{ github.workspace }}/everparse/src/cddl/tests/demo/test.cddl
  #     - name: Upload test artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         path: everparse/src/3d/tests/Comments*
  #         name: everparse-test-linux

  # fstar-src:
  #   ## NOTE: This is copied from build-src in the F* repo.
  #   needs: advance-hashes
  #   runs-on: ubuntu-22.04
  #   # We prefer slightly older Ubuntu so we get binaries that work on
  #   # all more recent versions.
  #   steps:
  #     - name: Download hash
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: hash
  #     - name: Read hash
  #       run: |
  #         hash="$(cat hash.txt)"
  #         echo "hash=$hash" >> $GITHUB_ENV
  #     - uses: actions/checkout@master
  #       with:
  #         path: everparse
  #         ref: ${{ env.hash }}
  #         sparse-checkout: |
  #           opt/Makefile
  #           opt/hashes.Makefile
  #     - name: Get F* hash
  #       run: |
  #         echo "fstar_hash=$(make -s -C everparse/opt echo-FStar-hash)" >> $GITHUB_ENV
  #     - uses: actions/checkout@master
  #       id: checkout
  #       with:
  #         repository: FStarLang/FStar
  #         ref: ${{ env.fstar_hash }}
  #     - name: Check cache
  #       id: check-cache
  #       uses: actions/cache/restore@v4
  #       with:
  #         path: fstar-src.tar.gz
  #         key: FStar-src-${{steps.checkout.outputs.commit}}
  #     - uses: ocaml/setup-ocaml@v3
  #       if: steps.check-cache.outputs.cache-hit != 'true'
  #       with:
  #         ocaml-compiler: 4.14.2
  #     - name: Prepare
  #       if: steps.check-cache.outputs.cache-hit != 'true'
  #       run: |
  #         ./.scripts/get_fstar_z3.sh $HOME/bin
  #         echo "PATH=$HOME/bin:$PATH" >> $GITHUB_ENV
  #         opam install --deps-only ./fstar.opam
  #     - name: Set F* version
  #       if: steps.check-cache.outputs.cache-hit != 'true'
  #       run: |
  #         echo FSTAR_VERSION="$(git describe --tags --dirty)" >> $GITHUB_ENV
  #     - name: Build package
  #       if: steps.check-cache.outputs.cache-hit != 'true'
  #       run: |
  #         eval $(opam env)
  #         export FSTAR_TAG=
  #         # ^ no tag in source package
  #         make -skj$(nproc) package-src ADMIT=1
  #     - name: Save
  #       if: steps.check-cache.outputs.cache-hit != 'true'
  #       uses: actions/cache/save@v4
  #       with:
  #         path: fstar-src.tar.gz
  #         key: FStar-src-${{steps.checkout.outputs.commit}}
  #     - uses: actions/upload-artifact@v4
  #       with:
  #         path: fstar-src.tar.gz
  #         name: fstar-src

  # build-windows:
  #   runs-on: windows-2025
  #   needs: fstar-src
  #   steps:
  #     - name: Download hash
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: hash
  #     - name: Read hash
  #       run: |
  #         hash="$(cat hash.txt)"
  #         echo "hash=$hash" >> $GITHUB_ENV
  #     - run: git config --global core.autocrlf input
  #     - uses: actions/checkout@master
  #       with:
  #         ref: ${{ env.hash }}
  #     - name: Set-up OCaml
  #       uses: ocaml/setup-ocaml@v3
  #       with:
  #         ocaml-compiler: 4.14.2
  #       # This will install Cygwin as well
  #     - name: Install Cygwin packages
  #       shell: C:\cygwin\bin\bash.exe --login '{0}'
  #       run: >-
  #         "$GITHUB_WORKSPACE"/src/package/windows/install-cygwin-packages.sh
  #     - uses: actions/download-artifact@v4
  #       with:
  #         name: fstar-src
  #     - name: Expand F* source package
  #       shell: C:\cygwin\bin\bash.exe --login '{0}'
  #       run: >-
  #         cd "$GITHUB_WORKSPACE" && tar xzf fstar-src.tar.gz && mv fstar opt/FStar
  #     - name: Build package
  #       shell: C:\cygwin\bin\bash.exe --login '{0}'
  #       run: >-
  #         cd $GITHUB_WORKSPACE && eval $(opam env) && env V=1 MAKE=make make -f package.Makefile package -kj$(nproc)
  #     - uses: actions/upload-artifact@v4
  #       with:
  #         path: |
  #           everparse_*.zip
  #         name: everparse-build-windows
  #     - uses: actions/upload-artifact@v4
  #       with:
  #         path: |
  #           EverParse*.nupkg
  #         name: everparse-build-nupkg

  # test-windows:
  #   needs: build-windows
  #   runs-on: windows-latest
  #   steps:
  #     - name: Download artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: everparse-build-windows
  #         path: test0
  #     - name: Extract artifact
  #       shell: pwsh
  #       run: |
  #         Expand-Archive -Path test0\everparse_*.zip -DestinationPath test1
  #         Move-Item -Path test1\everparse -Destination test
  #     - name: Check out repo
  #       uses: actions/checkout@v4
  #       with:
  #         sparse-checkout: |
  #           src/3d/tests
  #           src/cddl/tests/demo/test.cddl
  #         path: ${{ github.workspace }}\everparse
  #     - name: Test EverParse
  #       shell: cmd
  #       run: |
  #         ${{ github.workspace }}\test\everparse.cmd ${{ github.workspace }}\everparse\src\3d\tests\Arithmetic.3d ${{ github.workspace }}\everparse\src\3d\tests\FieldDependence0.3d && cd ${{ github.workspace }}\everparse\src\3d\tests && ${{ github.workspace }}\test\everparse.cmd Comments.3d && ${{ github.workspace }}\test\everparse.cmd --check_hashes inplace Comments.3d
  #     - name: Test EverParse test case generation
  #       shell: cmd
  #       run: |
  #         ${{ github.workspace }}\test\everparse.cmd ${{ github.workspace }}\everparse\src\3d\tests\ELFTestGen.3d --odir ${{ github.workspace }}\test-elf --z3_test ELFTestGen._ELFTestGen --z3_witnesses 10 --z3_branch_depth 5
  #     - name: Test EverParse test case generation with probe
  #       shell: cmd
  #       run: |
  #         ${{ github.workspace }}\test\everparse.cmd ${{ github.workspace }}\everparse\src\3d\tests\probe\src\Probe.3d --odir ${{ github.workspace }}\test-probe --z3_test Probe._primaryInPlace --z3_witnesses 10 --z3_branch_depth 5
  #     - name: Upload test artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         path: everparse\src\3d\tests\Comments*
  #         name: everparse-test-windows

  # ci-linux:
  #   needs: advance-hashes
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Download hash
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: hash
  #     - name: Read hash
  #       run: |
  #         hash="$(cat hash.txt)"
  #         echo "hash=$hash" >> $GITHUB_ENV
  #     - uses: actions/checkout@master
  #       with:
  #         submodules: true
  #         ref: ${{ env.hash }}
  #         path: everparse
  #     - name: Set-up OCaml
  #       uses: ocaml/setup-ocaml@v3
  #       with:
  #         ocaml-compiler: 5
  #     - name: Everparse CI
  #       run: |
  #         make -C everparse -j$(nproc) -k test

  # ci-macos:
  #   needs: advance-hashes
  #   runs-on: macOS-latest
  #   steps:
  #     - name: Download hash
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: hash
  #     - name: Read hash
  #       run: |
  #         hash="$(cat hash.txt)"
  #         echo "hash=$hash" >> $GITHUB_ENV
  #     - uses: actions/checkout@master
  #       with:
  #         submodules: true
  #         ref: ${{ env.hash }}
  #         path: everparse
  #     - name: Set-up OCaml
  #       uses: ocaml/setup-ocaml@v3
  #       with:
  #         ocaml-compiler: 5
  #     - name: Install Homebrew tools
  #       run: |
  #         brew install bash gnu-getopt make gnu-time
  #     - name: Test
  #       run: |
  #         nproc=$(sysctl -n hw.logicalcpu)
  #         if [[ $nproc -gt 8 ]] ; then nproc=8 ; fi
  #         cd everparse && gmake -j$nproc -k all test

  # ci-docker:
  #   needs: advance-hashes
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Download hash
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: hash
  #     - name: Read hash
  #       run: |
  #         hash="$(cat hash.txt)"
  #         echo "hash=$hash" >> $GITHUB_ENV
  #     - uses: actions/checkout@master
  #       with:
  #         submodules: true
  #         ref: ${{ env.hash }}
  #         path: everparse
  #     - name: Havoc .depend
  #       run: |
  #         echo '$(error "This file should have been cleaned away")' > everparse/.depend
  #     - name: Get number of processors
  #       run: |
  #         echo CI_THREADS=$(nproc) >> $GITHUB_ENV
  #     - name: Build a Docker image
  #       uses: docker/build-push-action@v6
  #       with:
  #         build-args: |
  #           CI_THREADS=${{ env.CI_THREADS }}
  #         context: everparse

  # test-interop-macos:
  #   needs: [build-macos, test-linux, test-windows]
  #   runs-on: macos-latest
  #   steps:
  #     - name: Download artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: everparse-build-macos
  #         path: test0
  #     - name: Extract artifact
  #       run: |
  #         pushd test0
  #         tar xzf everparse_*.tar.gz
  #         popd
  #         mv test0/everparse test
  #     - name: Download Linux test
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: everparse-test-linux
  #         path: linux
  #     - name: Test EverParse
  #       run: |
  #         cd ${{ github.workspace }}/linux/ && bash ${{ github.workspace }}/test/everparse.sh --check_hashes inplace Comments.3d
  #     - name: Download Windows test
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: everparse-test-windows
  #         path: windows
  #     - name: Test EverParse
  #       run: |
  #         cd ${{ github.workspace }}/windows/ && bash ${{ github.workspace }}/test/everparse.sh --check_hashes inplace Comments.3d

  # test-interop-linux:
  #   needs: [build-linux, test-macos, test-windows]
  #   runs-on: ubuntu-22.04
  #   steps:
  #     - name: Download artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: everparse-build-linux
  #         path: test0
  #     - name: Extract artifact
  #       run: |
  #         pushd test0
  #         tar xzf everparse_*.tar.gz
  #         popd
  #         mv test0/everparse test
  #     - name: Download Macos test
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: everparse-test-macos
  #         path: macos
  #     - name: Test EverParse
  #       run: |
  #         cd ${{ github.workspace }}/macos/ && bash ${{ github.workspace }}/test/everparse.sh --check_hashes inplace Comments.3d
  #     - name: Download Windows test
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: everparse-test-windows
  #         path: windows
  #     - name: Test EverParse
  #       run: |
  #         cd ${{ github.workspace }}/windows/ && bash ${{ github.workspace }}/test/everparse.sh --check_hashes inplace Comments.3d

  # test-interop-windows:
  #   needs: [build-windows, test-linux, test-macos]
  #   runs-on: windows-latest
  #   steps:
  #     - name: Download artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: everparse-build-windows
  #         path: test0
  #     - name: Extract artifact
  #       shell: pwsh
  #       run: |
  #         Expand-Archive -Path test0\everparse_*.zip -DestinationPath test1
  #         Move-Item -Path test1\everparse -Destination test
  #     - name: Download Linux test
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: everparse-test-linux
  #         path: linux
  #     - name: Test EverParse
  #       shell: cmd
  #       run: |
  #         cd ${{ github.workspace }}\linux && ${{ github.workspace }}\test\everparse.cmd --check_hashes inplace Comments.3d
  #     - name: Download Macos test
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: everparse-test-macos
  #         path: macos
  #     - name: Test EverParse
  #       shell: cmd
  #       run: |
  #         cd ${{ github.workspace }}\macos && ${{ github.workspace }}\test\everparse.cmd --check_hashes inplace Comments.3d

  create-pr:
    needs: [advance-hashes]
    runs-on: ubuntu-latest
    steps:
      - name: Download hash
        uses: actions/download-artifact@v4
        with:
          name: hash
      - name: Record hash and remove hash file
        run: |
          echo "updated_sha=$(cat hash.txt)" >> $GITHUB_ENV && rm hash.txt
      - uses: actions/checkout@master
        with:
          submodules: true
          fetch-depth: 0
          ref: ${{ env.updated_sha }}
      - name: create pull request
        run: |
          if [[ "$updated_sha" != ${{ github.sha }} ]] ; then git checkout -b _dzomo_pr_${{ github.run_id }} && git push --set-upstream origin _dzomo_pr_${{ github.run_id }} && gh pr create --base ${{ github.ref_name }} --title "Update hashes and snapshots" --fill-verbose ; fi
        env:
          GH_TOKEN: ${{ github.token }}
      - name: Delete branch
        run: |
          if [[ "$(git rev-parse origin/_dzomo_upgrade_${{ github.run_id }})" = "$updated_sha" ]] ; then git push origin --delete _dzomo_upgrade_${{ github.run_id }} ; fi
