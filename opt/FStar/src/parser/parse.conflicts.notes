
** Conflict (shift/reduce) in state 600.
** Token involved: BAR
** This state is reached from term after reading:

FUNCTION disjunctivePattern maybeFocusArrow TRY term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch) 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

term 
noSeqTerm 
FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch) 
         (?)

** In state 600, looking ahead at BAR, reducing production
** noSeqTerm -> TRY term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch) 
** is permitted because of the following sub-derivation:

reverse_left_flexible_nonempty_list(BAR,patternBranch) BAR patternBranch // lookahead token appears
patternBranch // lookahead token is inherited
disjunctivePattern maybeFocusArrow term // lookahead token is inherited
                                   noSeqTerm // lookahead token is inherited
                                   TRY term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch) . 

** In state 600, looking ahead at BAR, shifting is permitted
** because of the following sub-derivation:

patternBranch 
disjunctivePattern maybeFocusArrow term 
                                   noSeqTerm 
                                   TRY term WITH reverse_left_flexible_nonempty_list(BAR,patternBranch) 
                                                 reverse_left_flexible_nonempty_list(BAR,patternBranch) . BAR patternBranch 

--------------------------------------------------------------------------------
Notes:
function
   | P -> try _ with | Q | R

   This seems ok for the pretty printer;
   it will also "shift"

But, this:

function
   | P -> (try _ with | Q) | R

will be printed without parens and will be incorrect

Except, both are printed with a begin/end by fstar --indent
Note, fstar --dump_module omits the begin/end on the first example
--------------------------------------------------------------------------------

** Conflict (shift/reduce) in state 584.
** Token involved: BAR
** This state is reached from term after reading:

FUNCTION disjunctivePattern maybeFocusArrow MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_6) 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

term 
noSeqTerm 
FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch) 
         (?)

** In state 584, looking ahead at BAR, reducing production
** noSeqTerm -> MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_6) 
** is permitted because of the following sub-derivation:

reverse_left_flexible_nonempty_list(BAR,patternBranch) BAR patternBranch // lookahead token appears
patternBranch // lookahead token is inherited
disjunctivePattern maybeFocusArrow term // lookahead token is inherited
                                   noSeqTerm // lookahead token is inherited
                                   MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_6) . 

** In state 584, looking ahead at BAR, shifting is permitted
** because of the following sub-derivation:

patternBranch 
disjunctivePattern maybeFocusArrow term 
                                   noSeqTerm 
                                   MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_6) 
                                                   reverse_left_flexible_list(BAR,__anonymous_6) . BAR patternBranch 

--------------------------------------------------------------------------------
Notes:
same as above, but with match
--------------------------------------------------------------------------------

** Conflict (shift/reduce) in state 583.
** Token involved: LBRACE
** This state is reached from term after reading:

FUNCTION LPAREN tuplePattern COLON FUN nonempty_list(patternOrMultibinder) RARROW MATCH term WITH 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

term 
noSeqTerm 
FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch) 
         patternBranch 
         disjunctivePattern maybeFocusArrow term 
         separated_nonempty_list(BAR,tuplePattern) 
         tuplePattern 
         separated_nonempty_list(COMMA,constructorPattern) 
         constructorPattern 
         atomicPattern 
         (?)

** In state 583, looking ahead at LBRACE, shifting is permitted
** because of the following sub-derivation:

LPAREN tuplePattern COLON typ refineOpt RPAREN 
                          simpleTerm 
                          FUN nonempty_list(patternOrMultibinder) RARROW term 
                                                                         noSeqTerm 
                                                                         MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_6) 
                                                                                         patternBranch 
                                                                                         disjunctivePattern maybeFocusArrow term 
                                                                                         separated_nonempty_list(BAR,tuplePattern) 
                                                                                         tuplePattern 
                                                                                         separated_nonempty_list(COMMA,constructorPattern) 
                                                                                         constructorPattern 
                                                                                         atomicPattern 
                                                                                         . LBRACE separated_nonempty_list(SEMICOLON,fieldPattern) RBRACE 

** In state 583, looking ahead at LBRACE, reducing production
** reverse_left_flexible_list(BAR,__anonymous_6) -> 
** is permitted because of the following sub-derivation:

LPAREN tuplePattern COLON typ refineOpt RPAREN // lookahead token appears because refineOpt can begin with LBRACE
                          simpleTerm // lookahead token is inherited
                          FUN nonempty_list(patternOrMultibinder) RARROW term // lookahead token is inherited
                                                                         noSeqTerm // lookahead token is inherited
                                                                         MATCH term WITH reverse_left_flexible_list(BAR,__anonymous_6) // lookahead token is inherited
                                                                                         . 
--------------------------------------------------------------------------------
Notes:

let weird1 (x : fun y -> match e with {f=t} -> e) = ()
let weird2 (x : fun y -> match e with) = ()

weird1 Could be parsed as
let weird2 (x : (fun y -> match e with) {f=t} ...)
 which eventually fails
 
--------------------------------------------------------------------------------

** Conflict (shift/reduce) in state 537.
** Token involved: BAR
** This state is reached from term after reading:

FUNCTION disjunctivePattern maybeFocusArrow FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch) 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

term 
noSeqTerm 
FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch) 
         (?)

** In state 537, looking ahead at BAR, reducing production
** noSeqTerm -> FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch) 
** is permitted because of the following sub-derivation:

reverse_left_flexible_nonempty_list(BAR,patternBranch) BAR patternBranch // lookahead token appears
patternBranch // lookahead token is inherited
disjunctivePattern maybeFocusArrow term // lookahead token is inherited
                                   noSeqTerm // lookahead token is inherited
                                   FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch) . 

** In state 537, looking ahead at BAR, shifting is permitted
** because of the following sub-derivation:

patternBranch 
disjunctivePattern maybeFocusArrow term 
                                   noSeqTerm 
                                   FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch) 
                                            reverse_left_flexible_nonempty_list(BAR,patternBranch) . BAR patternBranch 

--------------------------------------------------------------------------------
Notes: Same as conflicts 1 and 2, but with function/function
--------------------------------------------------------------------------------

** Conflict (shift/reduce) in state 475.
** Token involved: LBRACE
** This state is reached from term after reading:

FUNCTION LPAREN tuplePattern COLON lidentOrUnderscore COLON appTerm 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

term 
noSeqTerm 
FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch) 
         patternBranch 
         disjunctivePattern maybeFocusArrow term 
         separated_nonempty_list(BAR,tuplePattern) 
         tuplePattern 
         separated_nonempty_list(COMMA,constructorPattern) 
         constructorPattern 
         atomicPattern 
         (?)

** In state 475, looking ahead at LBRACE, reducing production
** option(__anonymous_7) -> 
** is permitted because of the following sub-derivation:

LPAREN tuplePattern COLON typ refineOpt RPAREN // lookahead token appears because refineOpt can begin with LBRACE
                          simpleTerm // lookahead token is inherited
                          tmIff // lookahead token is inherited
                          tmImplies // lookahead token is inherited
                          tmArrow(tmFormula) // lookahead token is inherited
                          tmFormula // lookahead token is inherited
                          tmConjunction // lookahead token is inherited
                          tmTuple // lookahead token is inherited
                          separated_nonempty_list(COMMA,tmEq) // lookahead token is inherited
                          tmEq // lookahead token is inherited
                          tmNoEq // lookahead token is inherited
                          lidentOrUnderscore COLON appTerm refineOpt // lookahead token is inherited
                                                           option(__anonymous_7) // lookahead token is inherited
                                                           . 

** In state 475, looking ahead at LBRACE, shifting is permitted
** because of the following sub-derivation:

LPAREN tuplePattern COLON typ refineOpt RPAREN 
                          simpleTerm 
                          tmIff 
                          tmImplies IFF tmIff 
                          tmArrow(tmFormula) IMPLIES tmImplies 
                          tmFormula RARROW tmArrow(tmFormula) 
                          tmConjunction 
                          tmTuple 
                          separated_nonempty_list(COMMA,tmEq) 
                          tmEq 
                          tmNoEq 
                          lidentOrUnderscore COLON appTerm refineOpt 
                                                           option(__anonymous_7) 
                                                           . LBRACE noSeqTerm RBRACE 

--------------------------------------------------------------------------------
Notes:
 Consider:
 
   let refinements ( x : y:t{phi} ) = ()

 One parse is:
    let refinements ( x : (y:t{phi}) ) = ()
 Another is
     let refinements ( x : (y:t){phi} ) = ()

fstar --indent correctly prints these two back as written:
      let refinements1 ( x : y:t{phi} ) = ()
      let refinements2 ( x : (y:t){phi} ) = ()
--------------------------------------------------------------------------------

** Conflict (shift/reduce) in state 318.
** Tokens involved: SEMICOLON_SEMICOLON SEMICOLON
** The following explanations concentrate on token SEMICOLON_SEMICOLON.
** This state is reached from term after reading:

FUNCTION disjunctivePattern maybeFocusArrow noSeqTerm 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

term 
(?)

** In state 318, looking ahead at SEMICOLON_SEMICOLON, reducing production
** term -> noSeqTerm 
** is permitted because of the following sub-derivation:

noSeqTerm SEMICOLON_SEMICOLON term // lookahead token appears
FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch) // lookahead token is inherited
         patternBranch // lookahead token is inherited
         disjunctivePattern maybeFocusArrow term // lookahead token is inherited
                                            noSeqTerm . 

** In state 318, looking ahead at SEMICOLON_SEMICOLON, shifting is permitted
** because of the following sub-derivation:

noSeqTerm 
FUNCTION reverse_left_flexible_nonempty_list(BAR,patternBranch) 
         patternBranch 
         disjunctivePattern maybeFocusArrow term 
                                            noSeqTerm . SEMICOLON_SEMICOLON term 

--------------------------------------------------------------------------------
Notes:

let function_seq1 =
  function
    | 0 -> e1 ; e2

let function_seq2 =
  (function
    | 0 -> e1) ; e2

Both printed as

let function_seq1 = function | 0 -> e1; e2
let function_seq2 = function | 0 -> e1; e2

--------------------------------------------------------------------------------


////////////////////////////////////////////////////////////////////////////////
let test_try1 = 
  function
    | 0 -> try 0 with | 1 -> 0 | 2 -> 0

let test_try2 = 
  function
    | 0 -> (try 0 with | 1 -> 0) | 2 -> 0

////////////////////////////////////////////////////////////////////////////////
let test_match1 =
  function
    | 0 -> match 0 with | 1 -> 0 | 2 -> 0

let test_match2 =
  function
    | 0 -> (match 0 with | 1 -> 0) | 2 -> 0

////////////////////////////////////////////////////////////////////////////////
let test_function1 =
  function
    | 0 -> function | 1 -> 0 | 2 -> 0

let test_function2 =
  function
    | 0 -> (function | 1 -> 0) | 2 -> 0

////////////////////////////////////////////////////////////////////////////////
let function_seq1 =
  function
    | 0 -> e1 ; e2

let function_seq2 =
  (function
    | 0 -> e1) ; e2
////////////////////////////////////////////////////////////////////////////////
let refinements1 ( x : y:t{phi} ) = ()
let refinements2 ( x : (y:t){phi} ) = ()

////////////////////////////////////////////////////////////////////////////////
let weird1 (x : fun y -> match e with {f=t} -> e) = ()
